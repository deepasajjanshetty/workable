{
  "name": "input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef, type RefObject } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { X, Check, Plus } from \"lucide-react\";\r\nimport { useTags } from \"@/hooks/use-tags\";\r\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\r\n\r\ninterface Tag {\r\n    id: string;\r\n    label: string;\r\n    color?: string;\r\n}\r\n\r\ninterface TagInputProps {\r\n    onChange?: (tags: Tag[]) => void;\r\n    defaultTags?: Tag[];\r\n    suggestions?: Tag[];\r\n    maxTags?: number;\r\n    label?: string;\r\n    placeholder?: string;\r\n    error?: string;\r\n}\r\nconst defaultKokonutTag: Tag = {\r\n    id: \"kokonut-ui\",\r\n    label: \"workable\",\r\n    color: \"bg-indigo-100 text-indigo-700 border border-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:border-indigo-700/30\",\r\n};\r\n\r\nconst tagStyles = {\r\n    base: \"inline-flex items-center gap-1.5 px-2 py-0.5 text-sm rounded-md transition-colors duration-150\",\r\n    colors: {\r\n        blue: \"bg-blue-50 text-blue-700 border border-blue-200 hover:border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-700/30 dark:hover:border-blue-600/50\",\r\n        purple: \"bg-purple-50 text-purple-700 border border-purple-200 hover:border-purple-300 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-700/30 dark:hover:border-purple-600/50\",\r\n        green: \"bg-green-50 text-green-700 border border-green-200 hover:border-green-300 dark:bg-green-900/30 dark:text-green-300 dark:border-green-700/30 dark:hover:border-green-600/50\",\r\n    },\r\n};\r\n\r\nexport default function Input_02({\r\n    onChange,\r\n    defaultTags = [defaultKokonutTag], // Set workable as default\r\n    suggestions = [\r\n        { id: \"nextjs\", label: \"Next.js\" },\r\n        { id: \"react\", label: \"React\" },\r\n        { id: \"tailwind\", label: \"Tailwind\" },\r\n    ],\r\n    maxTags = 10,\r\n    label = \"Tags\",\r\n    placeholder = \"Add tags...\",\r\n    error,\r\n}: TagInputProps) {\r\n    const { tags, addTag, removeTag, removeLastTag } = useTags({\r\n        onChange,\r\n        defaultTags,\r\n        maxTags,\r\n    });\r\n    const [input, setInput] = useState(\"\");\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    const filteredSuggestions = suggestions\r\n        .filter(\r\n            (suggestion) =>\r\n                suggestion.label.toLowerCase().includes(input.toLowerCase()) &&\r\n                !tags.find((tag) => tag.id === suggestion.id)\r\n        )\r\n        .slice(0, 5);\r\n\r\n    const canAddNewTag =\r\n        !suggestions.find(\r\n            (s) => s.label.toLowerCase() === input.toLowerCase()\r\n        ) && input.length > 0;\r\n\r\n    function handleKeyDown(e: React.KeyboardEvent) {\r\n        if (e.key === \"Backspace\" && input === \"\" && tags.length > 0) {\r\n            removeLastTag();\r\n        } else if (e.key === \"Enter\" && input) {\r\n            e.preventDefault();\r\n            if (isOpen && filteredSuggestions[selectedIndex]) {\r\n                addTag(filteredSuggestions[selectedIndex]);\r\n                setInput(\"\");\r\n                setIsOpen(false);\r\n            } else if (canAddNewTag) {\r\n                addTag({ id: input, label: input });\r\n                setInput(\"\");\r\n                setIsOpen(false);\r\n            }\r\n        } else if (e.key === \"Escape\") {\r\n            setIsOpen(false);\r\n        }\r\n    }\r\n\r\n    useClickOutside(containerRef as RefObject<HTMLElement>, () =>\r\n        setIsOpen(false)\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className=\"w-full max-w-full sm:max-w-2xl space-y-2\"\r\n            ref={containerRef}\r\n        >\r\n            {label && (\r\n                <label\r\n                    className=\"text-sm font-medium text-zinc-800 dark:text-zinc-200\"\r\n                    htmlFor={label}\r\n                >\r\n                    {label}\r\n                </label>\r\n            )}\r\n\r\n            <div\r\n                className={cn(\r\n                    \"min-h-[3rem] sm:min-h-[2.5rem] p-2 sm:p-1.5\",\r\n                    \"rounded-lg border\",\r\n                    \"border-zinc-300 dark:border-zinc-700\",\r\n                    \"bg-white dark:bg-zinc-900\",\r\n                    \"focus-within:ring-2 focus-within:ring-indigo-500/30 dark:focus-within:ring-indigo-400/30\",\r\n                    \"flex items-center flex-row flex-wrap gap-2 sm:gap-1.5 relative\"\r\n                )}\r\n            >\r\n                {tags.map((tag) => (\r\n                    <span\r\n                        key={tag.id}\r\n                        className={cn(\r\n                            tagStyles.base,\r\n                            \"text-base sm:text-sm py-1 sm:py-0.5\",\r\n                            tag.color || tagStyles.colors.blue\r\n                        )}\r\n                    >\r\n                        {tag.label}\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => removeTag(tag.id)}\r\n                            className={cn(\r\n                                \"text-current/60 hover:text-current transition-colors\",\r\n                                \"p-1 sm:p-0\"\r\n                            )}\r\n                        >\r\n                            <X className=\"w-4 h-4 sm:w-3.5 sm:h-3.5\" />\r\n                        </button>\r\n                    </span>\r\n                ))}\r\n\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => {\r\n                        setInput(e.target.value);\r\n                        setIsOpen(true);\r\n                        setSelectedIndex(0);\r\n                    }}\r\n                    onFocus={() => setIsOpen(true)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder={tags.length === 0 ? placeholder : \"\"}\r\n                    className={cn(\r\n                        \"flex-1 min-w-[140px] sm:min-w-[120px] bg-transparent\",\r\n                        \"h-8 sm:h-7\",\r\n                        \"text-base sm:text-sm\",\r\n                        \"text-zinc-900 dark:text-zinc-100\",\r\n                        \"placeholder:text-zinc-500 dark:placeholder:text-zinc-400\",\r\n                        \"focus:outline-hidden\"\r\n                    )}\r\n                />\r\n\r\n                {isOpen && (input || filteredSuggestions.length > 0) && (\r\n                    <div\r\n                        className={cn(\r\n                            \"absolute left-0 right-0 top-full mt-1 z-50\",\r\n                            \"max-h-[60vh] sm:max-h-[300px] overflow-y-auto\",\r\n                            \"bg-white dark:bg-zinc-900\",\r\n                            \"border border-zinc-300 dark:border-zinc-700\",\r\n                            \"rounded-lg shadow-lg dark:shadow-zinc-950/50\",\r\n                            \"overflow-hidden\"\r\n                        )}\r\n                    >\r\n                        <div className=\"px-2 py-1.5 border-b border-zinc-200 dark:border-zinc-800\">\r\n                            <span className=\"text-xs font-medium text-zinc-600 dark:text-zinc-300\">\r\n                                Choose a tag or create one\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"p-2 sm:p-1.5 flex flex-wrap gap-2 sm:gap-1.5\">\r\n                            {filteredSuggestions.map((suggestion, index) => (\r\n                                <button\r\n                                    type=\"button\"\r\n                                    key={suggestion.id}\r\n                                    onClick={() => {\r\n                                        addTag(suggestion);\r\n                                        setInput(\"\");\r\n                                        setIsOpen(false);\r\n                                    }}\r\n                                    className={cn(\r\n                                        tagStyles.base,\r\n                                        selectedIndex === index\r\n                                            ? tagStyles.colors.blue\r\n                                            : \"bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600\"\r\n                                    )}\r\n                                >\r\n                                    {suggestion.label}\r\n                                    {selectedIndex === index && (\r\n                                        <Check className=\"w-3.5 h-3.5\" />\r\n                                    )}\r\n                                </button>\r\n                            ))}\r\n                            {canAddNewTag && (\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => {\r\n                                        const colorKeys = Object.keys(\r\n                                            tagStyles.colors\r\n                                        ) as Array<\r\n                                            keyof typeof tagStyles.colors\r\n                                        >;\r\n                                        const randomColor =\r\n                                            tagStyles.colors[\r\n                                                colorKeys[\r\n                                                    Math.floor(\r\n                                                        Math.random() *\r\n                                                            colorKeys.length\r\n                                                    )\r\n                                                ]\r\n                                            ];\r\n                                        addTag({\r\n                                            id: input,\r\n                                            label: input,\r\n                                            color: randomColor,\r\n                                        });\r\n                                        setInput(\"\");\r\n                                        setIsOpen(false);\r\n                                    }}\r\n                                    className={cn(\r\n                                        tagStyles.base,\r\n                                        selectedIndex ===\r\n                                            filteredSuggestions.length\r\n                                            ? tagStyles.colors.blue\r\n                                            : \"bg-zinc-50 text-zinc-700 border border-zinc-300 hover:border-zinc-400 dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 dark:hover:border-zinc-600\"\r\n                                    )}\r\n                                >\r\n                                    <Plus className=\"w-3.5 h-3.5\" />\r\n                                    Create \"{input}\"\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {error && (\r\n                <p className=\"text-sm text-red-600 dark:text-red-400\">\r\n                    {error}\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n}",
      "path": "input-02.tsx",
      "target": "/components/workable/input-02.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState } from \"react\";\r\n\r\ninterface Tag {\r\n    id: string;\r\n    label: string;\r\n    color?: string;\r\n}\r\n\r\ninterface UseTagsProps {\r\n    onChange?: (tags: Tag[]) => void;\r\n    defaultTags?: Tag[];\r\n    maxTags?: number;\r\n    defaultColors?: string[];\r\n}\r\n\r\nexport function useTags({\r\n    onChange,\r\n    defaultTags = [],\r\n    maxTags = 10,\r\n    defaultColors = [\r\n        \"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\",\r\n        \"bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300\",\r\n        \"bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300\",\r\n        \"bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300\",\r\n        \"bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300\",\r\n    ],\r\n}: UseTagsProps = {}) {\r\n    const [tags, setTags] = useState<Tag[]>(defaultTags);\r\n\r\n    function addTag(tag: Tag) {\r\n        if (tags.length >= maxTags) return;\r\n\r\n        const newTags = [\r\n            ...tags,\r\n            {\r\n                ...tag,\r\n                color:\r\n                    tag.color ||\r\n                    defaultColors[tags.length % defaultColors.length],\r\n            },\r\n        ];\r\n        setTags(newTags);\r\n        onChange?.(newTags);\r\n        return newTags;\r\n    }\r\n\r\n    function removeTag(tagId: string) {\r\n        const newTags = tags.filter((t) => t.id !== tagId);\r\n        setTags(newTags);\r\n        onChange?.(newTags);\r\n        return newTags;\r\n    }\r\n\r\n    function removeLastTag() {\r\n        if (tags.length === 0) return;\r\n        return removeTag(tags[tags.length - 1].id);\r\n    }\r\n\r\n    return {\r\n        tags,\r\n        setTags,\r\n        addTag,\r\n        removeTag,\r\n        removeLastTag,\r\n        hasReachedMax: tags.length >= maxTags,\r\n    };\r\n}",
      "path": "use-tags.ts",
      "target": "/hooks/use-tags.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\r\n\r\nexport function useClickOutside(\r\n    ref: RefObject<HTMLElement>,\r\n    handler: () => void\r\n) {\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [ref, handler]);\r\n}",
      "path": "use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}