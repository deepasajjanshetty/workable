{
  "name": "ai-input-08",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Mic } from \"lucide-react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport default function AIInput_08() {\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [time, setTime] = useState(0);\r\n    const [isClient, setIsClient] = useState(false);\r\n    const [isDemo, setIsDemo] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setIsClient(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let intervalId: NodeJS.Timeout;\r\n\r\n        if (submitted) {\r\n            intervalId = setInterval(() => {\r\n                setTime((t) => t + 1);\r\n            }, 1000);\r\n        } else {\r\n            setTime(0);\r\n        }\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [submitted]);\r\n\r\n    const formatTime = (seconds: number) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins.toString().padStart(2, \"0\")}:${secs\r\n            .toString()\r\n            .padStart(2, \"0\")}`;\r\n    };\r\n\r\n    /**\r\n     * Remove that, only used for demo\r\n     */\r\n    useEffect(() => {\r\n        if (!isDemo) return;\r\n\r\n        let timeoutId: NodeJS.Timeout;\r\n        const runAnimation = () => {\r\n            setSubmitted(true);\r\n            timeoutId = setTimeout(() => {\r\n                setSubmitted(false);\r\n                timeoutId = setTimeout(runAnimation, 1000);\r\n            }, 3000);\r\n        };\r\n\r\n        const initialTimeout = setTimeout(runAnimation, 100);\r\n        return () => {\r\n            clearTimeout(timeoutId);\r\n            clearTimeout(initialTimeout);\r\n        };\r\n    }, [isDemo]);\r\n\r\n    const handleClick = () => {\r\n        if (isDemo) {\r\n            setIsDemo(false);\r\n            setSubmitted(false);\r\n        } else {\r\n            setSubmitted((prev) => !prev);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"relative max-w-xl w-full mx-auto flex items-center flex-col gap-2\">\r\n                <button\r\n                    className={cn(\r\n                        \"group w-16 h-16 rounded-xl flex items-center justify-center transition-colors\",\r\n                        submitted\r\n                            ? \"bg-none\"\r\n                            : \"bg-none hover:bg-black/10 dark:hover:bg-white/10\"\r\n                    )}\r\n                    type=\"button\"\r\n                    onClick={handleClick}\r\n                >\r\n                    {submitted ? (\r\n                        <div\r\n                            className=\"w-6 h-6 rounded-sm animate-spin bg-black  dark:bg-white cursor-pointer pointer-events-auto\"\r\n                            style={{ animationDuration: \"3s\" }}\r\n                        />\r\n                    ) : (\r\n                        <Mic className=\"w-6 h-6 text-black/70 dark:text-white/70\" />\r\n                    )}\r\n                </button>\r\n\r\n                <span\r\n                    className={cn(\r\n                        \"font-mono text-sm transition-opacity duration-300\",\r\n                        submitted\r\n                            ? \"text-black/70 dark:text-white/70\"\r\n                            : \"text-black/30 dark:text-white/30\"\r\n                    )}\r\n                >\r\n                    {formatTime(time)}\r\n                </span>\r\n\r\n                <div className=\"h-4 w-64 flex items-center justify-center gap-0.5\">\r\n                    {[...Array(48)].map((_, i) => (\r\n                        <div\r\n                            key={i}\r\n                            className={cn(\r\n                                \"w-0.5 rounded-full transition-all duration-300\",\r\n                                submitted\r\n                                    ? \"bg-black/50 dark:bg-white/50 animate-pulse\"\r\n                                    : \"bg-black/10 dark:bg-white/10 h-1\"\r\n                            )}\r\n                            style={\r\n                                submitted && isClient\r\n                                    ? {\r\n                                          height: `${20 + Math.random() * 80}%`,\r\n                                          animationDelay: `${i * 0.05}s`,\r\n                                      }\r\n                                    : undefined\r\n                            }\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n                <p className=\"h-4 text-xs text-black/70 dark:text-white/70\">\r\n                    {submitted ? \"Listening...\" : \"Click to speak\"}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-08.tsx",
      "target": "components/workable/ai-input-08.tsx"
    }
  ]
}