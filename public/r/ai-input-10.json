{
  "name": "ai-input-10",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport {\r\n    Plus,\r\n    File,\r\n    Camera,\r\n    X,\r\n    ArrowRight,\r\n    Brain,\r\n    ChevronDown,\r\n    Lock,\r\n    Unlock,\r\n} from \"lucide-react\";\r\nimport { useState, useRef, useCallback, type RefObject } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\nimport { useFileInput } from \"@/hooks/use-file-input\";\r\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\r\n\r\nconst AI_MODELS = [\r\n    { name: \"GPT-4\", description: \"The popular kid\" },\r\n    { name: \"GPT-3.5\", description: \"Time flies, he is old now...\" },\r\n    { name: \"Claude\", description: \"Yes, the best for coding\" },\r\n].map((model) => ({ ...model, icon: <Brain className=\"w-4 h-4\" /> }));\r\n\r\nconst FileDisplay = ({\r\n    fileName,\r\n    onClear,\r\n}: {\r\n    fileName: string;\r\n    onClear: () => void;\r\n}) => (\r\n    <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg\">\r\n        <File className=\"w-4 h-4 dark:text-white\" />\r\n        <span className=\"text-sm dark:text-white\">{fileName}</span>\r\n        <button\r\n            type=\"button\"\r\n            onClick={onClear}\r\n            className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10\"\r\n        >\r\n            <X className=\"w-3 h-3 dark:text-white\" />\r\n        </button>\r\n    </div>\r\n);\r\n\r\nexport default function AIInput_10() {\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [state, setState] = useState({\r\n        value: \"\",\r\n        fileName: \"\",\r\n        isPrivacyMode: false,\r\n        selectedModel: \"GPT-4\",\r\n        isMenuOpen: false,\r\n        isModelMenuOpen: false,\r\n    });\r\n\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 40,\r\n        maxHeight: 200,\r\n    });\r\n    const { fileName, fileInputRef, handleFileSelect, clearFile } =\r\n        useFileInput({ accept: \"image/*\", maxSize: 5 });\r\n\r\n\r\n    const updateState = useCallback(\r\n        (updates: Partial<typeof state>) =>\r\n            setState((prev) => ({ ...prev, ...updates })),\r\n        []\r\n    );\r\n\r\n    useClickOutside(menuRef as RefObject<HTMLElement>   , () => {\r\n        if (state.isMenuOpen) updateState({ isMenuOpen: false });\r\n        if (state.isModelMenuOpen) updateState({ isModelMenuOpen: false });\r\n    });\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            updateState({ value: \"\" });\r\n            adjustHeight(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"rounded-xl bg-black/5 dark:bg-white/5\">\r\n                <div ref={menuRef}>\r\n                    <div className=\"border-b border-black/10 dark:border-white/10\">\r\n                        <div className=\"flex justify-between items-center px-4 py-2 text-sm text-zinc-600 dark:text-zinc-400\">\r\n                            <div className=\"relative\" data-model-menu>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() =>\r\n                                        updateState({\r\n                                            isModelMenuOpen:\r\n                                                !state.isModelMenuOpen,\r\n                                        })\r\n                                    }\r\n                                    className=\"flex items-center gap-1.5 hover:bg-black/5 dark:hover:bg-white/5 rounded-lg px-2 py-1\"\r\n                                >\r\n                                    <Brain className=\"w-4 h-4 dark:text-white\" />\r\n                                    <span className=\"dark:text-white\">\r\n                                        {state.selectedModel}\r\n                                    </span>\r\n                                    <ChevronDown className=\"w-3 h-3 ml-0.5 dark:text-white\" />\r\n                                </button>\r\n\r\n                                {state.isModelMenuOpen && (\r\n                                    <div className=\"absolute top-full left-0 mt-1 w-64 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 z-50 border border-black/10 dark:border-white/10\">\r\n                                        {AI_MODELS.map((model) => (\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                key={model.name}\r\n                                                className=\"w-full px-3 py-1.5 text-left hover:bg-black/5 dark:hover:bg-white/5 flex items-center gap-2 text-sm transition-colors dark:text-white\"\r\n                                                onClick={() =>\r\n                                                    updateState({\r\n                                                        selectedModel:\r\n                                                            model.name,\r\n                                                        isModelMenuOpen: false,\r\n                                                    })\r\n                                                }\r\n                                            >\r\n                                                <div className=\"flex items-center gap-2 flex-1\">\r\n                                                    {model.icon}\r\n                                                    <span>{model.name}</span>\r\n                                                </div>\r\n                                                <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">\r\n                                                    {model.description}\r\n                                                </span>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() =>\r\n                                    updateState({\r\n                                        isPrivacyMode: !state.isPrivacyMode,\r\n                                    })\r\n                                }\r\n                                className={cn(\r\n                                    \"flex items-center gap-2 p-1.5 rounded-lg hover:bg-black/5 dark:hover:bg-white/5\",\r\n                                    state.isPrivacyMode\r\n                                        ? \"text-green-600\"\r\n                                        : \"text-zinc-600 dark:text-zinc-400\"\r\n                                )}\r\n                            >\r\n                                {state.isPrivacyMode ? (\r\n                                    <Lock className=\"w-4 h-4\" />\r\n                                ) : (\r\n                                    <Unlock className=\"w-4 h-4\" />\r\n                                )}\r\n                                <span>Privacy</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {state.fileName && (\r\n                        <div className=\"px-4 pt-2\">\r\n                            <FileDisplay\r\n                                fileName={state.fileName}\r\n                                onClear={() => {\r\n                                    updateState({ fileName: \"\" });\r\n                                    if (fileInputRef.current)\r\n                                        fileInputRef.current.value = \"\";\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"relative px-2 py-2\">\r\n                        <div\r\n                            className=\"absolute left-3 top-1/2 -translate-y-1/2\"\r\n                            data-action-menu\r\n                        >\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() =>\r\n                                    updateState({\r\n                                        isMenuOpen: !state.isMenuOpen,\r\n                                    })\r\n                                }\r\n                                className=\"rounded-3xl bg-black/5 dark:bg-white/5 p-2 hover:bg-black/10 dark:hover:bg-white/10\"\r\n                            >\r\n                                <Plus className=\"w-4 h-4 dark:text-white\" />\r\n                            </button>\r\n\r\n                            {state.isMenuOpen && (\r\n                                <div className=\"absolute left-0 top-full mt-1 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 min-w-[140px] z-50 border border-black/10 dark:border-white/10\">\r\n                                    {[\r\n                                        {\r\n                                            icon: File,\r\n                                            label: \"Upload File\",\r\n                                            onClick: () =>\r\n                                                fileInputRef.current?.click(),\r\n                                        },\r\n                                        { icon: Camera, label: \"Take Photo\" },\r\n                                    ].map(({ icon: Icon, label, onClick }) => (\r\n                                        <button\r\n                                            type=\"button\"\r\n                                            key={label}\r\n                                            onClick={onClick}\r\n                                            className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm transition-colors dark:text-white\"\r\n                                        >\r\n                                            <Icon className=\"w-4 h-4 dark:text-white\" />\r\n                                            <span>{label}</span>\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <Textarea\r\n                            id=\"ai-input-10\"\r\n                            ref={textareaRef}\r\n                            value={state.value}\r\n                            placeholder=\"Type your message...\"\r\n                            className={cn(\r\n                                \"w-full rounded-xl pl-14 pr-10 border-none resize-none bg-transparent dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70\",\r\n                                \"min-h-[40px]\"\r\n                            )}\r\n                            onKeyDown={handleKeyDown}\r\n                            onChange={(e) => {\r\n                                updateState({ value: e.target.value });\r\n                                adjustHeight();\r\n                            }}\r\n                        />\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\r\n                        >\r\n                            <ArrowRight\r\n                                className={cn(\r\n                                    \"w-4 h-4 dark:text-white\",\r\n                                    state.value ? \"opacity-100\" : \"opacity-30\"\r\n                                )}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-10.tsx",
      "target": "/components/workable/ai-input-10.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\r\n\r\ninterface UseFileInputOptions {\r\n    accept?: string;\r\n    maxSize?: number;\r\n}\r\n\r\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\r\n    const [fileName, setFileName] = useState<string>(\"\");\r\n    const [error, setError] = useState<string>(\"\");\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [fileSize, setFileSize] = useState<number>(0);\r\n\r\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        validateAndSetFile(file);\r\n    };\r\n\r\n    const validateAndSetFile = (file: File | undefined) => {\r\n        setError(\"\");\r\n\r\n        if (file) {\r\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\r\n                setError(`File size must be less than ${maxSize}MB`);\r\n                return;\r\n            }\r\n\r\n            if (\r\n                accept &&\r\n                !file.type.match(accept.replace(\"/*\", \"/\"))\r\n            ) {\r\n                setError(`File type must be ${accept}`);\r\n                return;\r\n            }\r\n\r\n            setFileSize(file.size);\r\n            setFileName(file.name);\r\n        }\r\n    };\r\n\r\n    const clearFile = () => {\r\n        setFileName(\"\");\r\n        setError(\"\");\r\n        setFileSize(0);\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        fileName,\r\n        error,\r\n        fileInputRef,\r\n        handleFileSelect,\r\n        validateAndSetFile,\r\n        clearFile,\r\n        fileSize,\r\n    };\r\n}",
      "path": "use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\r\n\r\nexport function useClickOutside(\r\n    ref: RefObject<HTMLElement>,\r\n    handler: () => void\r\n) {\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [ref, handler]);\r\n}",
      "path": "use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}