{
  "name": "ai-input-09",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Plus, Mic, File, Camera, X, ArrowRight } from \"lucide-react\";\r\nimport { useState, useRef, type RefObject } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\nimport { useFileInput } from \"@/hooks/use-file-input\";\r\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\r\n\r\ninterface FileDisplayProps {\r\n    fileName: string;\r\n    onClear: () => void;\r\n}\r\n\r\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\r\n    <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg group\">\r\n        <File className=\"w-4 h-4 dark:text-white\" />\r\n        <span className=\"text-sm dark:text-white\">{fileName}</span>\r\n        <button\r\n            type=\"button\"\r\n            onClick={onClear}\r\n            className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n        >\r\n            <X className=\"w-3 h-3 dark:text-white\" />\r\n        </button>\r\n    </div>\r\n);\r\n\r\nexport default function AIInput_09() {\r\n    const [inputValue, setInputValue] = useState<string>(\"\");\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 56,\r\n        maxHeight: 200,\r\n    });\r\n    const { fileName, fileInputRef, handleFileSelect, clearFile } =\r\n        useFileInput({ accept: \"image/*\", maxSize: 5 });\r\n\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n    useClickOutside(menuRef as RefObject<HTMLElement>, () => {\r\n        if (isMenuOpen) setIsMenuOpen(false);\r\n    });\r\n\r\n    const handleFileUpload = () => {\r\n        fileInputRef.current?.click();\r\n        setIsMenuOpen(false);\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            setInputValue(\"\");\r\n            adjustHeight(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"relative max-w-xl w-full mx-auto flex flex-col gap-2\">\r\n                {fileName && (\r\n                    <FileDisplay fileName={fileName} onClear={clearFile} />\r\n                )}\r\n\r\n                <div className=\"relative\">\r\n                    <div\r\n                        ref={menuRef}\r\n                        className=\"absolute left-3 top-1/2 -translate-y-1/2 action-menu-container\"\r\n                    >\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n                            className=\"rounded-3xl bg-black/5 dark:bg-white/5 py-2 px-2 hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n                        >\r\n                            <Plus className=\"w-4 h-4 dark:text-white\" />\r\n                        </button>\r\n\r\n                        {isMenuOpen && (\r\n                            <div className=\"absolute left-0 top-full mt-1 bg-white dark:bg-zinc-800 rounded-lg shadow-lg py-1 min-w-[140px] z-50 border border-black/10 dark:border-white/10\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm dark:text-white\"\r\n                                    onClick={handleFileUpload}\r\n                                >\r\n                                    <File className=\"w-3.5 h-3.5 dark:text-white\" />\r\n                                    <span>Upload File</span>\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm dark:text-white\"\r\n                                    onClick={() => setIsMenuOpen(false)}\r\n                                >\r\n                                    <Mic className=\"w-3.5 h-3.5 dark:text-white\" />\r\n                                    <span>Voice Input</span>\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm dark:text-white\"\r\n                                    onClick={() => setIsMenuOpen(false)}\r\n                                >\r\n                                    <Camera className=\"w-3.5 h-3.5 dark:text-white\" />\r\n                                    <span>Take Photo</span>\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        className=\"hidden\"\r\n                        ref={fileInputRef}\r\n                        onChange={handleFileSelect}\r\n                    />\r\n\r\n                    <Textarea\r\n                        id=\"input-09\"\r\n                        placeholder=\"Ask me anything!\"\r\n                        className={cn(\r\n                            \"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-3xl pl-14 pr-10 py-4 placeholder:text-black/70 dark:placeholder:text-white/70 border-none ring-black/30 dark:ring-white/30 text-black dark:text-white resize-none text-wrap\",\r\n                            \"min-h-[56px]\"\r\n                        )}\r\n                        ref={textareaRef}\r\n                        value={inputValue}\r\n                        onKeyDown={handleKeyDown}\r\n                        onChange={(e) => {\r\n                            setInputValue(e.target.value);\r\n                            adjustHeight();\r\n                        }}\r\n                    />\r\n\r\n                    <button\r\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\r\n                        type=\"button\"\r\n                    >\r\n                        <ArrowRight\r\n                            className={cn(\r\n                                \"w-4 h-4 transition-opacity dark:text-white\",\r\n                                inputValue ? \"opacity-100\" : \"opacity-30\"\r\n                            )}\r\n                        />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-09.tsx",
      "target": "components/workable/ai-input-09.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "use-auto-resize-textarea.ts",
      "target": "hooks/use-auto-resize-textarea.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\r\n\r\nexport function useClickOutside(\r\n    ref: RefObject<HTMLElement>,\r\n    handler: () => void\r\n) {\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [ref, handler]);\r\n}",
      "path": "use-click-outside.ts",
      "target": "hooks/use-click-outside.ts"
    }
  ]
}