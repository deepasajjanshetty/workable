{
  "name": "ai-input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport {\r\n    Text,\r\n    CheckCheck,\r\n    ArrowDownWideNarrow,\r\n    CornerRightDown,\r\n} from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\nconst ITEMS = [\r\n    {\r\n        text: \"Summary\",\r\n        icon: Text,\r\n        colors: {\r\n            icon: \"text-orange-600\",\r\n            border: \"border-orange-500\",\r\n            bg: \"bg-orange-100\",\r\n        },\r\n    },\r\n    {\r\n        text: \"Fix Spelling and Grammar\",\r\n        icon: CheckCheck,\r\n        colors: {\r\n            icon: \"text-emerald-600\",\r\n            border: \"border-emerald-500\",\r\n            bg: \"bg-emerald-100\",\r\n        },\r\n    },\r\n    {\r\n        text: \"Make shorter\",\r\n        icon: ArrowDownWideNarrow,\r\n        colors: {\r\n            icon: \"text-purple-600\",\r\n            border: \"border-purple-500\",\r\n            bg: \"bg-purple-100\",\r\n        },\r\n    },\r\n];\r\n\r\nexport default function AIInput_03() {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [selectedItem, setSelectedItem] = useState<string | null>(\r\n        \"Make shorter\"\r\n    );\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 52,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    const toggleItem = (itemText: string) => {\r\n        setSelectedItem((prev) => (prev === itemText ? null : itemText));\r\n    };\r\n\r\n    const currentItem = selectedItem\r\n        ? ITEMS.find((item) => item.text === selectedItem)\r\n        : null;\r\n\r\n    const handleSubmit = () => {\r\n        setInputValue(\"\");\r\n        setSelectedItem(null);\r\n        adjustHeight(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"relative max-w-xl w-full mx-auto\">\r\n                <div className=\"relative border border-black/10 dark:border-white/10 focus-within:border-black/20 dark:focus-within:border-white/20 rounded-2xl bg-black/[0.03] dark:bg-white/[0.03]\">\r\n                    <div className=\"flex flex-col\">\r\n                        <div className=\"overflow-y-auto max-h-[200px]\">\r\n                            <Textarea\r\n                                ref={textareaRef}\r\n                                id=\"ai-input-03\"\r\n                                placeholder=\"Enter your text here...\"\r\n                                className={cn(\r\n                                    \"max-w-xl w-full rounded-2xl pr-10 pt-3 pb-3 placeholder:text-black/70 dark:placeholder:text-white/70 border-none focus:ring-3 text-black dark:text-white resize-none text-wrap bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 leading-[1.2]\",\r\n                                    \"min-h-[52px]\",\r\n                                    \"max-h-[200px]\"\r\n                                )}\r\n                                value={inputValue}\r\n                                onChange={(e) => {\r\n                                    setInputValue(e.target.value);\r\n                                    adjustHeight();\r\n                                }}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                        e.preventDefault();\r\n                                        handleSubmit();\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"h-12 bg-transparent\">\r\n                            {currentItem && (\r\n                                <div className=\"absolute left-3 bottom-3 z-10\">\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={handleSubmit}\r\n                                        className={cn(\r\n                                            \"inline-flex items-center gap-1.5\",\r\n                                            \"border shadow-xs rounded-md px-2 py-0.5 text-xs font-medium\",\r\n                                            \"animate-fadeIn hover:bg-black/5 dark:hover:bg-white/5 transition-colors duration-200\",\r\n                                            currentItem.colors.bg,\r\n                                            currentItem.colors.border\r\n                                        )}\r\n                                    >\r\n                                        <currentItem.icon\r\n                                            className={`w-3.5 h-3.5 ${currentItem.colors.icon}`}\r\n                                        />\r\n                                        <span\r\n                                            className={currentItem.colors.icon}\r\n                                        >\r\n                                            {selectedItem}\r\n                                        </span>\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <CornerRightDown\r\n                        className={cn(\r\n                            \"absolute right-3 top-3 w-4 h-4 transition-all duration-200 dark:text-white\",\r\n                            inputValue\r\n                                ? \"opacity-100 scale-100\"\r\n                                : \"opacity-30 scale-95\"\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-1.5 mt-2 max-w-xl mx-auto justify-start px-4\">\r\n                {ITEMS.filter((item) => item.text !== selectedItem).map(\r\n                    ({ text, icon: Icon, colors }) => (\r\n                        <button\r\n                            type=\"button\"\r\n                            key={text}\r\n                            className={cn(\r\n                                \"px-3 py-1.5 text-xs font-medium rounded-full\",\r\n                                \"border transition-all duration-200\",\r\n                                \"border-black/10 dark:border-white/10 bg-white dark:bg-gray-900 hover:bg-black/5 dark:hover:bg-white/5\",\r\n                                \"shrink-0\"\r\n                            )}\r\n                            onClick={() => toggleItem(text)}\r\n                        >\r\n                            <div className=\"flex items-center gap-1.5\">\r\n                                <Icon className={cn(\"h-4 w-4\", colors.icon)} />\r\n                                <span className=\"text-black/70 dark:text-white/70 whitespace-nowrap\">\r\n                                    {text}\r\n                                </span>\r\n                            </div>\r\n                        </button>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/workable/ai-input/ai-input-03.tsx",
      "target": "/components/workable/ai-input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}