{
  "name": "particles-background",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\nimport { motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface CyberBackgroundProps {\r\n    title?: string;\r\n    subtitle?: string;\r\n    particleCount?: number;\r\n    noiseIntensity?: number;\r\n    particleSize?: { min: number; max: number };\r\n    className?: string;\r\n}\r\n\r\nfunction createNoise() {\r\n    const permutation = [\r\n        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,\r\n        140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,\r\n        120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,\r\n        177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,\r\n        165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,\r\n        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,\r\n        65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,\r\n        200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,\r\n        64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,\r\n        212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,\r\n        213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,\r\n        172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,\r\n        112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191,\r\n        179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,\r\n        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,\r\n        254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,\r\n        78, 66, 215, 61, 156, 180,\r\n    ];\r\n\r\n    const p = new Array(512);\r\n    for (let i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];\r\n\r\n    function fade(t: number) {\r\n        return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n\r\n    function lerp(t: number, a: number, b: number) {\r\n        return a + t * (b - a);\r\n    }\r\n\r\n    function grad(hash: number, x: number, y: number, z: number) {\r\n        const h = hash & 15;\r\n        const u = h < 8 ? x : y;\r\n        const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\r\n        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\r\n    }\r\n\r\n    return {\r\n        simplex3: (x: number, y: number, z: number) => {\r\n            const X = Math.floor(x) & 255;\r\n            const Y = Math.floor(y) & 255;\r\n            const Z = Math.floor(z) & 255;\r\n\r\n            x -= Math.floor(x);\r\n            y -= Math.floor(y);\r\n            z -= Math.floor(z);\r\n\r\n            const u = fade(x);\r\n            const v = fade(y);\r\n            const w = fade(z);\r\n\r\n            const A = p[X] + Y;\r\n            const AA = p[A] + Z;\r\n            const AB = p[A + 1] + Z;\r\n            const B = p[X + 1] + Y;\r\n            const BA = p[B] + Z;\r\n            const BB = p[B + 1] + Z;\r\n\r\n            return lerp(\r\n                w,\r\n                lerp(\r\n                    v,\r\n                    lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\r\n                    lerp(\r\n                        u,\r\n                        grad(p[AB], x, y - 1, z),\r\n                        grad(p[BB], x - 1, y - 1, z)\r\n                    )\r\n                ),\r\n                lerp(\r\n                    v,\r\n                    lerp(\r\n                        u,\r\n                        grad(p[AA + 1], x, y, z - 1),\r\n                        grad(p[BA + 1], x - 1, y, z - 1)\r\n                    ),\r\n                    lerp(\r\n                        u,\r\n                        grad(p[AB + 1], x, y - 1, z - 1),\r\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)\r\n                    )\r\n                )\r\n            );\r\n        },\r\n    };\r\n}\r\n\r\nconst COLOR_SCHEME = {\r\n    light: {\r\n        particle: {\r\n            color: \"rgba(0, 0, 0, 0.07)\",\r\n        },\r\n        background: \"rgba(255, 255, 255, 0.12)\",\r\n    },\r\n    dark: {\r\n        particle: {\r\n            color: \"rgba(255, 255, 255, 0.07)\",\r\n        },\r\n        background: \"rgba(0, 0, 0, 0.12)\",\r\n    },\r\n} as const;\r\n\r\ninterface Particle {\r\n    x: number;\r\n    y: number;\r\n    size: number;\r\n    velocity: { x: number; y: number };\r\n    life: number;\r\n    maxLife: number;\r\n}\r\n\r\nexport default function ParticlesBackground({\r\n    title = \"Particles Background\",\r\n    subtitle = \"Make your website stand out\",\r\n    particleCount = 2000,\r\n    noiseIntensity = 0.003,\r\n    particleSize = { min: 0.5, max: 2 },\r\n    className,\r\n}: CyberBackgroundProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const noise = createNoise();\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext(\"2d\", { alpha: true });\r\n        if (!ctx) return;\r\n\r\n        const resizeCanvas = () => {\r\n            const container = canvas.parentElement;\r\n            if (!container) return;\r\n\r\n            canvas.width = container.clientWidth;\r\n            canvas.height = container.clientHeight;\r\n        };\r\n\r\n        resizeCanvas();\r\n\r\n        const particles: Particle[] = Array.from(\r\n            { length: particleCount },\r\n            () => ({\r\n                x: Math.random() * canvas.width,\r\n                y: Math.random() * canvas.height,\r\n                size:\r\n                    Math.random() * (particleSize.max - particleSize.min) +\r\n                    particleSize.min,\r\n                velocity: { x: 0, y: 0 },\r\n                life: Math.random() * 100,\r\n                maxLife: 100 + Math.random() * 50,\r\n            })\r\n        );\r\n\r\n        const animate = () => {\r\n            const isDark = document.documentElement.classList.contains(\"dark\");\r\n            const scheme = isDark ? COLOR_SCHEME.dark : COLOR_SCHEME.light;\r\n\r\n            ctx.fillStyle = isDark\r\n                ? \"rgba(0, 0, 0, 0.1)\"\r\n                : \"rgba(255, 255, 255, 0.1)\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            for (const particle of particles) {\r\n                particle.life += 1;\r\n                if (particle.life > particle.maxLife) {\r\n                    particle.life = 0;\r\n                    particle.x = Math.random() * canvas.width;\r\n                    particle.y = Math.random() * canvas.height;\r\n                }\r\n\r\n                const opacity =\r\n                    Math.sin((particle.life / particle.maxLife) * Math.PI) *\r\n                    0.15;\r\n\r\n                const n = noise.simplex3(\r\n                    particle.x * noiseIntensity,\r\n                    particle.y * noiseIntensity,\r\n                    Date.now() * 0.0001\r\n                );\r\n\r\n                const angle = n * Math.PI * 4;\r\n                particle.velocity.x = Math.cos(angle) * 2;\r\n                particle.velocity.y = Math.sin(angle) * 2;\r\n\r\n                particle.x += particle.velocity.x;\r\n                particle.y += particle.velocity.y;\r\n\r\n                if (particle.x < 0) particle.x = canvas.width;\r\n                if (particle.x > canvas.width) particle.x = 0;\r\n                if (particle.y < 0) particle.y = canvas.height;\r\n                if (particle.y > canvas.height) particle.y = 0;\r\n\r\n                ctx.fillStyle = isDark\r\n                    ? `rgba(255, 255, 255, ${opacity})`\r\n                    : `rgba(0, 0, 0, ${opacity})`;\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n\r\n            requestAnimationFrame(animate);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            resizeCanvas();\r\n        };\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [particleCount, noiseIntensity, particleSize, noise]);\r\n\r\n    return (\r\n        <div\r\n            className={cn(\r\n                \"relative w-full h-screen overflow-hidden\",\r\n                \"bg-white dark:bg-black\",\r\n                className\r\n            )}\r\n        >\r\n            <canvas\r\n                ref={canvasRef}\r\n                className=\"absolute inset-0 w-full h-full\"\r\n            />\r\n            <div className=\"relative z-10 flex flex-col items-center justify-center w-full h-full\">\r\n                <motion.div\r\n                    initial={{ opacity: 0, y: 20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ duration: 0.8 }}\r\n                    className=\"text-center space-y-4\"\r\n                >\r\n                    <h1 className=\"text-6xl md:text-8xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-black to-black/70 dark:from-white dark:to-white/70 drop-shadow-sm\">\r\n                        {title}\r\n                    </h1>\r\n                    <p className=\"text-xl md:text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-b from-black/90 to-black/50 dark:from-white/90 dark:to-white/50\">\r\n                        {subtitle}\r\n                    </p>\r\n                </motion.div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "particles-background.tsx",
      "target": "/components/workable/particles-background.tsx"
    }
  ]
}