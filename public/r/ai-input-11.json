{
  "name": "ai-input-11",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { ArrowRight, Bot } from \"lucide-react\";\r\nimport { useState, useRef, type RefObject } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\r\n\r\nconst AI_AGENTS = [\r\n    { name: \"Copywriter Agent\", description: \"Write anything you want\" },\r\n    { name: \"Nextjs Agent\", description: \"Write code for anything you want\" },\r\n].map((model) => ({ ...model }));\r\n\r\n\r\nexport default function AIInput_11() {\r\n    const [state, setState] = useState({\r\n        value: \"\",\r\n        fileName: \"\",\r\n        selectedModel: \"Copywriter Agent\",\r\n        isModelMenuOpen: false,\r\n    });\r\n\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 40,\r\n        maxHeight: 200,\r\n    });\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n    useClickOutside(menuRef as RefObject<HTMLElement>, () => {\r\n        updateState({ isModelMenuOpen: false });\r\n    });\r\n\r\n    const updateState = (updates: Partial<typeof state>) =>\r\n        setState((prev) => ({ ...prev, ...updates }));\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            updateState({ value: \"\" });\r\n            adjustHeight(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"rounded-xl bg-black/5 dark:bg-white/5\">\r\n                <div className=\"relative\">\r\n                    <div className=\"px-2 pt-2 pb-2 flex items-center\">\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                                updateState({\r\n                                    isModelMenuOpen: !state.isModelMenuOpen,\r\n                                })\r\n                            }\r\n                            className=\"flex items-center p-1.5 hover:bg-black/5 dark:hover:bg-white/5 rounded-lg\"\r\n                        >\r\n                            <Bot className=\"w-4 h-4 dark:text-white\" />\r\n                        </button>\r\n\r\n                        <div className=\"h-6 w-[1px] bg-black/10 dark:bg-white/10 mx-2\" />\r\n\r\n                        <Textarea\r\n                            id=\"ai-input-11\"\r\n                            placeholder=\"Ask me anything!\"\r\n                            className={cn(\r\n                                \"max-w-xl w-full rounded-3xl pl-2 pr-10 placeholder:text-black/70 dark:placeholder:text-white/70 border-none ring-black/30 dark:ring-white/30 text-black dark:text-white resize-none text-wrap py-2 bg-transparent\",\r\n                                \"min-h-[40px]\"\r\n                            )}\r\n                            ref={textareaRef}\r\n                            value={state.value}\r\n                            onChange={(e) => {\r\n                                updateState({ value: e.target.value });\r\n                                adjustHeight();\r\n                            }}\r\n                            onKeyDown={handleKeyDown}\r\n                        />\r\n\r\n                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"rounded-xl bg-black/5 dark:bg-white/5 p-1\"\r\n                            >\r\n                                <ArrowRight\r\n                                    className={cn(\r\n                                        \"w-4 h-4 dark:text-white\",\r\n                                        state.value\r\n                                            ? \"opacity-100\"\r\n                                            : \"opacity-30\"\r\n                                    )}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"absolute -bottom-5 left-1 flex items-center gap-1.5 text-[10px] text-muted-foreground dark:text-white/50\">\r\n                        <span>{state.selectedModel}</span>\r\n                    </div>\r\n\r\n                    {/* Model Selection Menu */}\r\n                    {state.isModelMenuOpen && (\r\n                        <div\r\n                            ref={menuRef}\r\n                            className=\"absolute top-12 left-2 mt-1 bg-white dark:bg-zinc-800 rounded-lg shadow-lg border border-black/10 dark:border-white/10 py-1 w-72 z-10\"\r\n                        >\r\n                            {AI_AGENTS.map((model) => (\r\n                                <button\r\n                                    key={model.name}\r\n                                    type=\"button\"\r\n                                    onClick={() => {\r\n                                        updateState({\r\n                                            selectedModel: model.name,\r\n                                            isModelMenuOpen: false,\r\n                                        });\r\n                                    }}\r\n                                    className=\"w-full px-3 py-1.5 text-left hover:bg-black/5 dark:hover:bg-white/5 flex items-center gap-2\"\r\n                                >\r\n                                    <div>\r\n                                        <div className=\"text-sm dark:text-white\">\r\n                                            {model.name}\r\n                                        </div>\r\n                                        <div className=\"text-xs text-black/50 dark:text-white/50\">\r\n                                            {model.description}\r\n                                        </div>\r\n                                    </div>\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/workable/ai-input/ai-input-11.tsx",
      "target": "/components/workable/ai-input-11.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\r\n\r\nexport function useClickOutside(\r\n    ref: RefObject<HTMLElement>,\r\n    handler: () => void\r\n) {\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [ref, handler]);\r\n}",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}