{
  "name": "ai-input-13",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { ArrowRight } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\ninterface SidebarSection {\r\n    title: string;\r\n    subtitle: string;\r\n    count: number;\r\n    items: string[];\r\n}\r\n\r\nexport default function AIInput_13() {\r\n    const [value, setValue] = useState(\"\");\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 40,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    const sidebarSections: SidebarSection[] = [\r\n        {\r\n            title: \"Saved Tools\",\r\n            subtitle: \"Most used\",\r\n            count: 12,\r\n            items: [\"Translate to French\", \"Summarize Text\", \"Generate Title\"],\r\n        },\r\n        {\r\n            title: \"History\",\r\n            subtitle: \"Past chats\",\r\n            count: 24,\r\n            items: [\r\n                \"API Integration Help\",\r\n                \"Debugging Assistant\",\r\n                \"Code Review Session\",\r\n            ],\r\n        },\r\n    ];\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            setValue(\"\");\r\n            adjustHeight(true);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"flex flex-col gap-4\">\r\n                <div className=\"bg-black/5 dark:bg-white/5 rounded-xl\">\r\n                    <div className=\"relative px-2 py-2\">\r\n                        <Textarea\r\n                            id=\"ai-input-13\"\r\n                            value={value}\r\n                            placeholder=\"Type your message...\"\r\n                            className={cn(\r\n                                \"w-full rounded-xl px-4 border-none resize-none bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70\",\r\n                                \"min-h-[40px]\"\r\n                            )}\r\n                            ref={textareaRef}\r\n                            onKeyDown={handleKeyDown}\r\n                            onChange={(e) => {\r\n                                setValue(e.target.value);\r\n                                adjustHeight();\r\n                            }}\r\n                        />\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\r\n                        >\r\n                            <ArrowRight\r\n                                className={cn(\r\n                                    \"w-4 h-4 dark:text-white\",\r\n                                    value ? \"opacity-100\" : \"opacity-30\"\r\n                                )}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-center gap-4\">\r\n                    {sidebarSections.map((section) => (\r\n                        <div\r\n                            key={section.title}\r\n                            className=\"bg-black/5 dark:bg-white/5 rounded-xl p-3 flex-1\"\r\n                        >\r\n                            <div className=\"flex justify-between items-start mb-2\">\r\n                                <div>\r\n                                    <h3 className=\"font-semibold text-sm dark:text-white\">\r\n                                        {section.title}\r\n                                    </h3>\r\n                                    <p className=\"text-xs text-black/60 dark:text-white/60\">\r\n                                        {section.subtitle}\r\n                                    </p>\r\n                                </div>\r\n                                <span className=\"text-xs text-black/50 dark:text-white/50 ml-2\">\r\n                                    {section.count}\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div className=\"space-y-2 mt-2\">\r\n                                {section.items.map((item) => (\r\n                                    <div\r\n                                        key={item}\r\n                                        className=\"text-xs text-black/60 hover:text-black dark:text-white/60 dark:hover:text-white cursor-pointer transition-colors\"\r\n                                    >\r\n                                        {item}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-13.tsx",
      "target": "components/workable/ai-input-13.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "use-auto-resize-textarea.ts",
      "target": "hooks/use-auto-resize-textarea.ts"
    }
  ]
}