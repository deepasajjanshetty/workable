{
  "name": "input-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { X, Check } from \"lucide-react\";\r\n\r\ninterface SimpleInputProps {\r\n    label?: string;\r\n    placeholder?: string;\r\n    error?: string;\r\n    success?: string;\r\n    onChange?: (value: string) => void;\r\n    onClear?: () => void;\r\n    type?: \"text\" | \"email\" | \"password\" | \"search\";\r\n}\r\n\r\nexport default function Input_01({\r\n    label = \"Label\",\r\n    placeholder = \"Type something...\",\r\n    error,\r\n    success,\r\n    onChange,\r\n    onClear,\r\n    type = \"text\",\r\n}: SimpleInputProps) {\r\n    const [value, setValue] = useState(\"\");\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClear = () => {\r\n        setValue(\"\");\r\n        onClear?.();\r\n        inputRef.current?.focus();\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full max-w-xs space-y-1.5\">\r\n            <label\r\n                className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\r\n                htmlFor={label}\r\n            >\r\n                {label}\r\n            </label>\r\n\r\n            <div className=\"relative group\">\r\n                <input\r\n                    ref={inputRef}\r\n                    type={type}\r\n                    value={value}\r\n                    onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                        onChange?.(e.target.value);\r\n                    }}\r\n                    onFocus={() => setIsFocused(true)}\r\n                    onBlur={() => setIsFocused(false)}\r\n                    placeholder={placeholder}\r\n                    className={cn(\r\n                        \"w-full px-3 py-2\",\r\n                        \"rounded-lg\",\r\n                        \"bg-white dark:bg-zinc-900\",\r\n                        \"border border-zinc-200 dark:border-zinc-800\",\r\n                        \"text-sm text-zinc-900 dark:text-zinc-100\",\r\n                        \"placeholder:text-zinc-400 dark:placeholder:text-zinc-600\",\r\n                        \"transition-all duration-200\",\r\n                        \"focus:outline-hidden focus:ring-2\",\r\n                        error\r\n                            ? \"border-red-500 focus:ring-red-500/20\"\r\n                            : success\r\n                            ? \"border-green-500 focus:ring-green-500/20\"\r\n                            : \"focus:ring-indigo-500/20\",\r\n                        isFocused && \"border-indigo-500\"\r\n                    )}\r\n                />\r\n\r\n                {/* Clear button */}\r\n                {value && (\r\n                    <button\r\n                        onClick={handleClear}\r\n                        className={cn(\r\n                            \"absolute right-2 top-1/2 -translate-y-1/2\",\r\n                            \"p-1 rounded-md\",\r\n                            \"text-zinc-400 hover:text-zinc-600\",\r\n                            \"dark:text-zinc-600 dark:hover:text-zinc-400\",\r\n                            \"transition-colors\"\r\n                        )}\r\n                    >\r\n                        <X className=\"w-4 h-4\" />\r\n                    </button>\r\n                )}\r\n\r\n                {/* Status indicator */}\r\n                <div\r\n                    className={cn(\r\n                        \"absolute -right-4 top-1/2 -translate-y-1/2\",\r\n                        \"transition-opacity duration-200\",\r\n                        !error && !success && \"opacity-0\"\r\n                    )}\r\n                >\r\n                    {error ? (\r\n                        <X className=\"w-4 h-4 text-red-500\" />\r\n                    ) : success ? (\r\n                        <Check className=\"w-4 h-4 text-green-500\" />\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Error/Success message */}\r\n            {(error || success) && (\r\n                <p\r\n                    className={cn(\r\n                        \"text-sm\",\r\n                        error ? \"text-red-500\" : \"text-green-500\"\r\n                    )}\r\n                >\r\n                    {error || success}\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n}",
      "path": "input-01.tsx",
      "target": "components/workable/input-01.tsx"
    }
  ]
}