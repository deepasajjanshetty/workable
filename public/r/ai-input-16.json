{
  "name": "ai-input-16",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef, useCallback, type RefObject } from \"react\";\r\nimport { Command } from \"cmdk\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { MessageSquare, Wand2, Search, SendHorizontal } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\r\n\r\nconst COMMANDS = [\r\n    {\r\n        id: \"chat\",\r\n        label: \"Chat\",\r\n        description: \"Start a conversation\",\r\n        icon: MessageSquare,\r\n        prefix: \"/chat\",\r\n    },\r\n    {\r\n        id: \"generate\",\r\n        label: \"Generate\",\r\n        description: \"Generate code or content\",\r\n        icon: Wand2,\r\n        prefix: \"/generate\",\r\n    },\r\n    {\r\n        id: \"analyze\",\r\n        label: \"Analyze\",\r\n        description: \"Analyze code or text\",\r\n        icon: Search,\r\n        prefix: \"/analyze\",\r\n    },\r\n];\r\n\r\nexport default function AIInput_16() {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [activeCommand, setActiveCommand] = useState<string | null>(null);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    useClickOutside(containerRef as RefObject<HTMLElement>, () => {\r\n        if (isOpen) setIsOpen(false);\r\n    });\r\n\r\n    const handleKeyDown = useCallback(\r\n        (e: React.KeyboardEvent) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                if (!inputValue.trim() && !activeCommand) return;\r\n\r\n                setInputValue(\"\");\r\n                setActiveCommand(null);\r\n            }\r\n\r\n            if (e.key === \"Backspace\" && inputValue === \"\" && activeCommand) {\r\n                setActiveCommand(null);\r\n            }\r\n        },\r\n        [activeCommand, inputValue]\r\n    );\r\n\r\n    const handleCommandSelect = (commandId: string) => {\r\n        const command = COMMANDS.find((cmd) => cmd.id === commandId);\r\n        if (command) {\r\n            setInputValue(\"\");\r\n            setActiveCommand(commandId);\r\n            setIsOpen(false);\r\n            inputRef.current?.focus();\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        if (!inputValue.trim() && !activeCommand) return;\r\n        setInputValue(\"\");\r\n        setIsOpen(false);\r\n        setActiveCommand(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4 min-h-[244px]\">\r\n            <div className=\"relative\" ref={containerRef}>\r\n                <div className=\"relative rounded-lg bg-black/5 dark:bg-white/5\">\r\n                    <div className=\"flex items-center flex-wrap gap-2 px-3 h-auto min-h-[48px] py-2\">\r\n                        {activeCommand &&\r\n                            (() => {\r\n                                const activeCmd = COMMANDS.find(\r\n                                    (cmd) => cmd.id === activeCommand\r\n                                );\r\n                                if (!activeCmd) return null;\r\n\r\n                                return (\r\n                                    <div className=\"flex items-center gap-2 text-sm bg-black/10 dark:bg-white/10 px-2 py-1 rounded-md\">\r\n                                        <span className=\"flex items-center gap-1.5 shrink-0\">\r\n                                            <activeCmd.icon className=\"w-4 h-4 text-black/50 dark:text-white/50\" />\r\n                                            <span className=\"text-black/70 dark:text-white/70\">\r\n                                                {activeCmd.label}\r\n                                            </span>\r\n                                        </span>\r\n                                    </div>\r\n                                );\r\n                            })()}\r\n                        <div className=\"flex-1 flex items-center gap-2\">\r\n                            <input\r\n                                ref={inputRef}\r\n                                type=\"text\"\r\n                                value={inputValue}\r\n                                onChange={(e) => setInputValue(e.target.value)}\r\n                                onKeyDown={handleKeyDown}\r\n                                onFocus={() => !activeCommand && setIsOpen(true)}\r\n                                placeholder={\r\n                                    activeCommand\r\n                                        ? \"Type your message...\"\r\n                                        : \"Type / for commands...\"\r\n                                }\r\n                                className=\"flex-1 bg-transparent border-none outline-hidden text-md text-black dark:text-white placeholder:text-black/60 dark:placeholder:text-white/60\"\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={handleButtonClick}\r\n                                className={cn(\r\n                                    \"p-1.5 rounded-md transition-colors shrink-0\",\r\n                                    inputValue || activeCommand\r\n                                        ? \"bg-sky-500/15 text-sky-500\"\r\n                                        : \"text-black/50 dark:text-white/50 hover:text-black/70 dark:hover:text-white/70\"\r\n                                )}\r\n                            >\r\n                                <SendHorizontal className=\"w-4 h-4\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <AnimatePresence>\r\n                    {isOpen && !activeCommand && (\r\n                        <motion.div\r\n                            initial={{ opacity: 0, y: 8 }}\r\n                            animate={{ opacity: 1, y: 0 }}\r\n                            exit={{ opacity: 0, y: 8 }}\r\n                            transition={{ duration: 0.15 }}\r\n                            className=\"absolute w-full mt-2 rounded-lg bg-black/5 dark:bg-white/5 shadow-lg overflow-hidden\"\r\n                        >\r\n                            <Command className=\"w-full\">\r\n                                <Command.List className=\"py-2\">\r\n                                    {COMMANDS.map((command) => (\r\n                                        <Command.Item\r\n                                            key={command.id}\r\n                                            onSelect={() =>\r\n                                                handleCommandSelect(command.id)\r\n                                            }\r\n                                            className=\"px-3 py-2.5 flex items-center gap-3 text-sm hover:bg-black/10 dark:hover:bg-white/10 cursor-pointer group\"\r\n                                        >\r\n                                            <command.icon className=\"w-4 h-4 text-black/50 dark:text-white/50 group-hover:text-black/70 dark:group-hover:text-white/70\" />\r\n                                            <div className=\"flex flex-col\">\r\n                                                <span className=\"font-medium text-black/70 dark:text-white/70\">\r\n                                                    {command.label}\r\n                                                </span>\r\n                                                <span className=\"text-xs text-black/50 dark:text-white/50\">\r\n                                                    {command.description}\r\n                                                </span>\r\n                                            </div>\r\n                                            <span className=\"ml-auto text-xs text-black/30 dark:text-white/30\">\r\n                                                {command.prefix}\r\n                                            </span>\r\n                                        </Command.Item>\r\n                                    ))}\r\n                                </Command.List>\r\n                            </Command>\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/workable/ai-input/ai-input-16.tsx",
      "target": "/components/workable/ai-input-16.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\r\n\r\nexport function useClickOutside(\r\n    ref: RefObject<HTMLElement>,\r\n    handler: () => void\r\n) {\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () =>\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }, [ref, handler]);\r\n}",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}