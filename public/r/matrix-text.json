{
  "name": "matrix-text",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport { motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ClientOnly } from \"@/components/ui/client-only\";\r\n\r\ninterface LetterState {\r\n    char: string;\r\n    isMatrix: boolean;\r\n    isSpace: boolean;\r\n}\r\n\r\ninterface MatrixTextProps {\r\n    text?: string;\r\n    className?: string;\r\n    initialDelay?: number;\r\n    letterAnimationDuration?: number;\r\n    letterInterval?: number;\r\n}\r\n\r\nconst MatrixText = ({\r\n    text = \"HelloWorld!\",\r\n    className,\r\n    initialDelay = 200,\r\n    letterAnimationDuration = 500,\r\n    letterInterval = 100,\r\n}: MatrixTextProps) => {\r\n    const [letters, setLetters] = useState<LetterState[]>(() =>\r\n        text.split(\"\").map((char) => ({\r\n            char,\r\n            isMatrix: false,\r\n            isSpace: char === \" \",\r\n        }))\r\n    );\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n    const getRandomChar = useCallback(\r\n        () => (Math.random() > 0.5 ? \"1\" : \"0\"),\r\n        []\r\n    );\r\n\r\n    const animateLetter = useCallback(\r\n        (index: number) => {\r\n            if (index >= text.length) return;\r\n\r\n            requestAnimationFrame(() => {\r\n                setLetters((prev) => {\r\n                    const newLetters = [...prev];\r\n                    if (!newLetters[index].isSpace) {\r\n                        newLetters[index] = {\r\n                            ...newLetters[index],\r\n                            char: getRandomChar(),\r\n                            isMatrix: true,\r\n                        };\r\n                    }\r\n                    return newLetters;\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    setLetters((prev) => {\r\n                        const newLetters = [...prev];\r\n                        newLetters[index] = {\r\n                            ...newLetters[index],\r\n                            char: text[index],\r\n                            isMatrix: false,\r\n                        };\r\n                        return newLetters;\r\n                    });\r\n                }, letterAnimationDuration);\r\n            });\r\n        },\r\n        [getRandomChar, text, letterAnimationDuration]\r\n    );\r\n\r\n    const startAnimation = useCallback(() => {\r\n        if (isAnimating) return;\r\n\r\n        setIsAnimating(true);\r\n        let currentIndex = 0;\r\n\r\n        const animate = () => {\r\n            if (currentIndex >= text.length) {\r\n                setIsAnimating(false);\r\n                return;\r\n            }\r\n\r\n            animateLetter(currentIndex);\r\n            currentIndex++;\r\n            setTimeout(animate, letterInterval);\r\n        };\r\n\r\n        animate();\r\n    }, [animateLetter, text, isAnimating, letterInterval]);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(startAnimation, initialDelay);\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    const motionVariants = useMemo(\r\n        () => ({\r\n            // initial: {\r\n            //     color: \"rgb(var(--foreground-rgb))\",\r\n            // },\r\n            matrix: {\r\n                color: \"#00ff00\",\r\n                textShadow: \"0 2px 4px rgba(0, 255, 0, 0.5)\",\r\n            },\r\n            // normal: {\r\n            //     color: \"rgb(var(--foreground-rgb))\",\r\n            //     textShadow: \"none\",\r\n            // },\r\n        }),\r\n        []\r\n    );\r\n\r\n    return (\r\n        <ClientOnly fallback={<div className={cn(\"flex min-h-screen items-center justify-center text-black dark:text-white\", className)}><div className=\"h-24 flex items-center justify-center\"><div className=\"flex flex-wrap items-center justify-center font-mono text-4xl md:text-6xl\">{text}</div></div></div>}>\r\n            <div\r\n                className={cn(\r\n                    \"flex min-h-screen items-center justify-center text-black dark:text-white\",\r\n                    className\r\n                )}\r\n                aria-label=\"Matrix text animation\"\r\n            >\r\n                <div className=\"h-24 flex items-center justify-center\">\r\n                    <div className=\"flex flex-wrap items-center justify-center\">\r\n                        {letters.map((letter, index) => (\r\n                            <motion.div\r\n                                key={`${index}-${letter.char}`}\r\n                                className=\"font-mono text-4xl md:text-6xl w-[1ch] text-center overflow-hidden\"\r\n                                initial=\"initial\"\r\n                                animate={letter.isMatrix ? \"matrix\" : \"normal\"}\r\n                                variants={motionVariants}\r\n                                transition={{\r\n                                    duration: 0.1,\r\n                                    ease: \"easeInOut\",\r\n                                }}\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    fontVariantNumeric: \"tabular-nums\",\r\n                                }}\r\n                            >\r\n                                {letter.isSpace ? \"\\u00A0\" : letter.char}\r\n                            </motion.div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ClientOnly>\r\n    );\r\n};\r\n\r\nexport default MatrixText;",
      "path": "matrix-text.tsx",
      "target": "/components/workable/matrix-text.tsx"
    }
  ]
}