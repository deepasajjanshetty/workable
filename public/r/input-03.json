{
  "name": "input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Upload, X, FileText } from \"lucide-react\";\r\nimport { useFileInput } from \"@/hooks/use-file-input\";\r\n\r\nexport default function Input_03() {\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [preview, setPreview] = useState<string | null>(null);\r\n    const [uploadProgress, setUploadProgress] = useState(0);\r\n    const {\r\n        fileName,\r\n        fileInputRef,\r\n        clearFile,\r\n        error,\r\n        validateAndSetFile,\r\n        fileSize,\r\n    } = useFileInput({ accept: \"image/*\", maxSize: 5 });\r\n\r\n    function handleFile(file: File) {\r\n        validateAndSetFile(file);\r\n\r\n        if (!error) {\r\n            simulateUpload(file);\r\n        }\r\n    }\r\n\r\n    function simulateUpload(file: File) {\r\n        let progress = 0;\r\n        const interval = setInterval(() => {\r\n            progress += 10;\r\n            setUploadProgress(progress);\r\n            if (progress >= 100) {\r\n                clearInterval(interval);\r\n                if (file.type.startsWith(\"image/\")) {\r\n                    const reader = new FileReader();\r\n                    reader.onloadend = () => {\r\n                        setPreview(reader.result as string);\r\n                    };\r\n                    reader.readAsDataURL(file);\r\n                }\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    function handleDrop(e: React.DragEvent) {\r\n        e.preventDefault();\r\n        setIsDragging(false);\r\n\r\n        const droppedFile = e.dataTransfer.files[0];\r\n        if (!droppedFile) return;\r\n\r\n        handleFile(droppedFile);\r\n    }\r\n\r\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const selectedFile = e.target.files?.[0];\r\n        if (!selectedFile) return;\r\n\r\n        handleFile(selectedFile);\r\n    }\r\n\r\n    function removeFile() {\r\n        clearFile();\r\n        setPreview(null);\r\n        setUploadProgress(0);\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full max-w-md space-y-2\">\r\n            <label className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\r\n                Upload file\r\n            </label>\r\n            <div\r\n                className={cn(\r\n                    \"relative group cursor-pointer\",\r\n                    \"rounded-lg border-2 border-dashed\",\r\n                    \"transition-colors duration-200\",\r\n                    isDragging\r\n                        ? \"border-indigo-500 bg-indigo-50/50 dark:bg-indigo-500/10\"\r\n                        : \"border-zinc-200 dark:border-zinc-800\"\r\n                )}\r\n                onDragOver={(e) => {\r\n                    e.preventDefault();\r\n                    setIsDragging(true);\r\n                }}\r\n                onDragLeave={() => setIsDragging(false)}\r\n                onDrop={handleDrop}\r\n                onClick={() => fileInputRef.current?.click()}\r\n                onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\" || e.key === \" \") {\r\n                        e.preventDefault();\r\n                        fileInputRef.current?.click();\r\n                    }\r\n                }}\r\n                aria-label=\"Upload file\"\r\n            >\r\n                <input\r\n                    ref={fileInputRef}\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleChange}\r\n                    className=\"hidden\"\r\n                />\r\n\r\n                <div className=\"p-8 space-y-4\">\r\n                    {!fileName ? (\r\n                        <div className=\"flex flex-col items-center gap-2\">\r\n                            <Upload className=\"w-8 h-8 text-zinc-400 dark:text-zinc-500\" />\r\n                            <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\r\n                                Drag and drop or click to upload\r\n                            </p>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"flex items-center gap-4\">\r\n                            {preview ? (\r\n                                <div className=\"relative w-16 h-16 rounded-lg overflow-hidden\">\r\n                                    <img\r\n                                        src={preview}\r\n                                        alt=\"Preview\"\r\n                                        className=\"w-full h-full object-cover\"\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"w-16 h-16 rounded-lg bg-zinc-100 dark:bg-zinc-800 flex items-center justify-center\">\r\n                                    <FileText className=\"w-8 h-8 text-zinc-400\" />\r\n                                </div>\r\n                            )}\r\n                            <div className=\"flex-1 min-w-0\">\r\n                                <p className=\"text-sm font-medium truncate\">\r\n                                    {fileName || \"No file selected\"}\r\n                                </p>\r\n                                <p className=\"text-xs text-zinc-500\">\r\n                                    {fileSize\r\n                                        ? `${(fileSize / 1024 / 1024).toFixed(\r\n                                              2\r\n                                          )} MB`\r\n                                        : \"0 MB\"}\r\n                                </p>\r\n                                {uploadProgress < 100 && (\r\n                                    <div className=\"mt-2 h-1 w-full bg-zinc-100 dark:bg-zinc-800 rounded-full overflow-hidden\">\r\n                                        <div\r\n                                            className=\"h-full bg-indigo-500 transition-all duration-200\"\r\n                                            style={{\r\n                                                width: `${uploadProgress}%`,\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    removeFile();\r\n                                }}\r\n                                className=\"p-1 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded\"\r\n                            >\r\n                                <X className=\"w-5 h-5 text-zinc-400\" />\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/workable/input/input-03.tsx",
      "target": "/components/workable/input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\r\n\r\ninterface UseFileInputOptions {\r\n    accept?: string;\r\n    maxSize?: number;\r\n}\r\n\r\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\r\n    const [fileName, setFileName] = useState<string>(\"\");\r\n    const [error, setError] = useState<string>(\"\");\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [fileSize, setFileSize] = useState<number>(0);\r\n\r\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        validateAndSetFile(file);\r\n    };\r\n\r\n    const validateAndSetFile = (file: File | undefined) => {\r\n        setError(\"\");\r\n\r\n        if (file) {\r\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\r\n                setError(`File size must be less than ${maxSize}MB`);\r\n                return;\r\n            }\r\n\r\n            if (\r\n                accept &&\r\n                !file.type.match(accept.replace(\"/*\", \"/\"))\r\n            ) {\r\n                setError(`File type must be ${accept}`);\r\n                return;\r\n            }\r\n\r\n            setFileSize(file.size);\r\n            setFileName(file.name);\r\n        }\r\n    };\r\n\r\n    const clearFile = () => {\r\n        setFileName(\"\");\r\n        setError(\"\");\r\n        setFileSize(0);\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        fileName,\r\n        error,\r\n        fileInputRef,\r\n        handleFileSelect,\r\n        validateAndSetFile,\r\n        clearFile,\r\n        fileSize,\r\n    };\r\n}",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    }
  ]
}