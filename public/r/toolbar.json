{
  "name": "toolbar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n    Filter,\r\n    Settings,\r\n    Download,\r\n    Share2,\r\n    type LucideIcon,\r\n    User,\r\n    Bell,\r\n    Sun,\r\n    Edit2,\r\n    Lock,\r\n} from \"lucide-react\";\r\n\r\ninterface ToolbarItem {\r\n    id: string;\r\n    title: string;\r\n    icon: LucideIcon;\r\n    type?: never;\r\n}\r\n\r\ninterface ToolbarProps {\r\n    className?: string;\r\n    activeColor?: string;\r\n    onSearch?: (value: string) => void;\r\n}\r\n\r\nconst buttonVariants = {\r\n    initial: {\r\n        gap: 0,\r\n        paddingLeft: \".5rem\",\r\n        paddingRight: \".5rem\",\r\n    },\r\n    animate: (isSelected: boolean) => ({\r\n        gap: isSelected ? \".5rem\" : 0,\r\n        paddingLeft: isSelected ? \"1rem\" : \".5rem\",\r\n        paddingRight: isSelected ? \"1rem\" : \".5rem\",\r\n    }),\r\n};\r\n\r\nconst spanVariants = {\r\n    initial: { width: 0, opacity: 0 },\r\n    animate: { width: \"auto\", opacity: 1 },\r\n    exit: { width: 0, opacity: 0 },\r\n};\r\n\r\nconst notificationVariants = {\r\n    initial: { opacity: 0, y: 10 },\r\n    animate: { opacity: 1, y: -10 },\r\n    exit: { opacity: 0, y: -20 },\r\n};\r\n\r\nconst lineVariants = {\r\n    initial: { scaleX: 0, x: \"-50%\" },\r\n    animate: {\r\n        scaleX: 1,\r\n        x: \"0%\",\r\n        transition: { duration: 0.2, ease: \"easeOut\" as const },\r\n    },\r\n    exit: {\r\n        scaleX: 0,\r\n        x: \"50%\",\r\n        transition: { duration: 0.2, ease: \"easeIn\" as const },\r\n    },\r\n};\r\n\r\nconst transition = { type: \"spring\" as const, bounce: 0, duration: 0.4 };\r\n\r\nexport function Toolbar({\r\n    className,\r\n    activeColor = \"text-primary\",\r\n    onSearch,\r\n}: ToolbarProps) {\r\n    const [selected, setSelected] = React.useState<string | null>(\"filter\");\r\n    const [isToggled, setIsToggled] = React.useState(false);\r\n    const [activeNotification, setActiveNotification] = React.useState<\r\n        string | null\r\n    >(null);\r\n    const outsideClickRef = React.useRef(null);\r\n\r\n    const toolbarItems: ToolbarItem[] = [\r\n        { id: \"filter\", title: \"Filter\", icon: Filter },\r\n        { id: \"settings\", title: \"Settings\", icon: Settings },\r\n        { id: \"download\", title: \"Download\", icon: Download },\r\n        { id: \"share\", title: \"Share\", icon: Share2 },\r\n        { id: \"notifications\", title: \"Notifications\", icon: Bell },\r\n        { id: \"profile\", title: \"Profile\", icon: User },\r\n        { id: \"theme\", title: \"Theme\", icon: Sun },\r\n    ];\r\n\r\n    const handleItemClick = (itemId: string) => {\r\n        setSelected(selected === itemId ? null : itemId);\r\n        setActiveNotification(itemId);\r\n        setTimeout(() => setActiveNotification(null), 1500);\r\n    };\r\n\r\n    return (\r\n        <div className=\"space-y-2\">\r\n            <div\r\n                ref={outsideClickRef}\r\n                className={cn(\r\n                    \"flex items-center gap-3 p-2 relative\",\r\n                    \"bg-background\",\r\n                    \"border rounded-xl\",\r\n                    \"transition-all duration-200\",\r\n                    className\r\n                )}\r\n            >\r\n                <AnimatePresence>\r\n                    {activeNotification && (\r\n                        <motion.div\r\n                            variants={notificationVariants}\r\n                            initial=\"initial\"\r\n                            animate=\"animate\"\r\n                            exit=\"exit\"\r\n                            transition={{ duration: 0.3 }}\r\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 z-50\"\r\n                        >\r\n                            <div className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-xs\">\r\n                                {\r\n                                    toolbarItems.find(\r\n                                        (item) => item.id === activeNotification\r\n                                    )?.title\r\n                                }{\" \"}\r\n                                clicked!\r\n                            </div>\r\n                            <motion.div\r\n                                variants={lineVariants}\r\n                                initial=\"initial\"\r\n                                animate=\"animate\"\r\n                                exit=\"exit\"\r\n                                className=\"absolute -bottom-1 left-1/2 w-full h-[2px] bg-primary origin-left\"\r\n                            />\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                    {toolbarItems.map((item) => (\r\n                        <motion.button\r\n                            key={item.id}\r\n                            variants={buttonVariants}\r\n                            initial={false}\r\n                            animate=\"animate\"\r\n                            custom={selected === item.id}\r\n                            onClick={() => handleItemClick(item.id)}\r\n                            transition={transition}\r\n                            className={cn(\r\n                                \"relative flex items-center rounded-none px-3 py-2\",\r\n                                \"text-sm font-medium transition-colors duration-300\",\r\n                                selected === item.id\r\n                                    ? \"bg-[#1F9CFE] text-white rounded-lg\"\r\n                                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\r\n                            )}\r\n                        >\r\n                            <item.icon\r\n                                size={16}\r\n                                className={cn(\r\n                                    selected === item.id && \"text-white\"\r\n                                )}\r\n                            />\r\n                            <AnimatePresence initial={false}>\r\n                                {selected === item.id && (\r\n                                    <motion.span\r\n                                        variants={spanVariants}\r\n                                        initial=\"initial\"\r\n                                        animate=\"animate\"\r\n                                        exit=\"exit\"\r\n                                        transition={transition}\r\n                                        className=\"overflow-hidden\"\r\n                                    >\r\n                                        {item.title}\r\n                                    </motion.span>\r\n                                )}\r\n                            </AnimatePresence>\r\n                        </motion.button>\r\n                    ))}\r\n\r\n                    <motion.button\r\n                        whileHover={{ scale: 1.02 }}\r\n                        whileTap={{ scale: 0.98 }}\r\n                        onClick={() => setIsToggled(!isToggled)}\r\n                        className=\"flex items-center gap-2 px-4 py-2\r\n                            bg-primary text-primary-foreground\r\n                            rounded-xl \r\n                            border border-primary/30\r\n                            shadow-sm \r\n                            transition-all duration-200\r\n                            hover:shadow-md \r\n                            hover:bg-primary/90\r\n                            hover:border-primary/40\r\n                            active:border-primary/50\"\r\n                    >\r\n                        {isToggled ? (\r\n                            <Edit2 className=\"w-3.5 h-3.5\" />\r\n                        ) : (\r\n                            <Lock className=\"w-3.5 h-3.5\" />\r\n                        )}\r\n                        <span className=\"text-sm font-medium\">\r\n                            {isToggled ? \"On\" : \"Off\"}\r\n                        </span>\r\n                    </motion.button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Toolbar;",
      "path": "/components/workable/toolbar.tsx",
      "target": "/components/workable/toolbar.tsx"
    }
  ]
}