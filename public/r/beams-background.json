{
  "name": "beams-background",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ClientOnly } from \"@/components/ui/client-only\";\r\n\r\ninterface AnimatedGradientBackgroundProps {\r\n    className?: string;\r\n    children?: React.ReactNode;\r\n    intensity?: \"subtle\" | \"medium\" | \"strong\";\r\n}\r\n\r\ninterface Beam {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    length: number;\r\n    angle: number;\r\n    speed: number;\r\n    opacity: number;\r\n    hue: number;\r\n    pulse: number;\r\n    pulseSpeed: number;\r\n}\r\n\r\nfunction createBeam(width: number, height: number): Beam {\r\n    const angle = -35 + Math.random() * 10;\r\n    return {\r\n        x: Math.random() * width * 1.5 - width * 0.25,\r\n        y: Math.random() * height * 1.5 - height * 0.25,\r\n        width: 30 + Math.random() * 60,\r\n        length: height * 2.5,\r\n        angle: angle,\r\n        speed: 0.6 + Math.random() * 1.2,\r\n        opacity: 0.12 + Math.random() * 0.16,\r\n        hue: 190 + Math.random() * 70,\r\n        pulse: Math.random() * Math.PI * 2,\r\n        pulseSpeed: 0.02 + Math.random() * 0.03,\r\n    };\r\n}\r\n\r\nexport default function BeamsBackground({\r\n    className,\r\n    intensity = \"strong\",\r\n}: AnimatedGradientBackgroundProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const beamsRef = useRef<Beam[]>([]);\r\n    const animationFrameRef = useRef<number>(0);\r\n    const MINIMUM_BEAMS = 20;\r\n\r\n    const opacityMap = {\r\n        subtle: 0.7,\r\n        medium: 0.85,\r\n        strong: 1,\r\n    };\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n\r\n        const updateCanvasSize = () => {\r\n            const dpr = window.devicePixelRatio || 1;\r\n            canvas.width = window.innerWidth * dpr;\r\n            canvas.height = window.innerHeight * dpr;\r\n            canvas.style.width = `${window.innerWidth}px`;\r\n            canvas.style.height = `${window.innerHeight}px`;\r\n            ctx.scale(dpr, dpr);\r\n\r\n            const totalBeams = MINIMUM_BEAMS * 1.5;\r\n            beamsRef.current = Array.from({ length: totalBeams }, () =>\r\n                createBeam(canvas.width, canvas.height)\r\n            );\r\n        };\r\n\r\n        updateCanvasSize();\r\n        window.addEventListener(\"resize\", updateCanvasSize);\r\n\r\n        function resetBeam(beam: Beam, index: number, totalBeams: number) {\r\n            if (!canvas) return beam;\r\n            \r\n            const column = index % 3;\r\n            const spacing = canvas.width / 3;\r\n\r\n            beam.y = canvas.height + 100;\r\n            beam.x =\r\n                column * spacing +\r\n                spacing / 2 +\r\n                (Math.random() - 0.5) * spacing * 0.5;\r\n            beam.width = 100 + Math.random() * 100;\r\n            beam.speed = 0.5 + Math.random() * 0.4;\r\n            beam.hue = 190 + (index * 70) / totalBeams;\r\n            beam.opacity = 0.2 + Math.random() * 0.1;\r\n            return beam;\r\n        }\r\n\r\n        function drawBeam(ctx: CanvasRenderingContext2D, beam: Beam) {\r\n            ctx.save();\r\n            ctx.translate(beam.x, beam.y);\r\n            ctx.rotate((beam.angle * Math.PI) / 180);\r\n\r\n            // Calculate pulsing opacity\r\n            const pulsingOpacity =\r\n                beam.opacity *\r\n                (0.8 + Math.sin(beam.pulse) * 0.2) *\r\n                opacityMap[intensity];\r\n\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, beam.length);\r\n\r\n            // Enhanced gradient with multiple color stops\r\n            gradient.addColorStop(0, `hsla(${beam.hue}, 85%, 65%, 0)`);\r\n            gradient.addColorStop(\r\n                0.1,\r\n                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`\r\n            );\r\n            gradient.addColorStop(\r\n                0.4,\r\n                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`\r\n            );\r\n            gradient.addColorStop(\r\n                0.6,\r\n                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`\r\n            );\r\n            gradient.addColorStop(\r\n                0.9,\r\n                `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`\r\n            );\r\n            gradient.addColorStop(1, `hsla(${beam.hue}, 85%, 65%, 0)`);\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fillRect(-beam.width / 2, 0, beam.width, beam.length);\r\n            ctx.restore();\r\n        }\r\n\r\n        function animate() {\r\n            if (!canvas || !ctx) return;\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.filter = \"blur(35px)\";\r\n\r\n            const totalBeams = beamsRef.current.length;\r\n            beamsRef.current.forEach((beam, index) => {\r\n                beam.y -= beam.speed;\r\n                beam.pulse += beam.pulseSpeed;\r\n\r\n                // Reset beam when it goes off screen\r\n                if (beam.y + beam.length < -100) {\r\n                    resetBeam(beam, index, totalBeams);\r\n                }\r\n\r\n                drawBeam(ctx, beam);\r\n            });\r\n\r\n            animationFrameRef.current = requestAnimationFrame(animate);\r\n        }\r\n\r\n        animate();\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", updateCanvasSize);\r\n            if (animationFrameRef.current) {\r\n                cancelAnimationFrame(animationFrameRef.current);\r\n            }\r\n        };\r\n    }, [intensity]);\r\n\r\n    return (\r\n        <ClientOnly fallback={<div className={cn(\"relative min-h-screen w-full overflow-hidden bg-neutral-950\", className)}><div className=\"relative z-10 flex h-screen w-full items-center justify-center\"><div className=\"flex flex-col items-center justify-center gap-6 px-4 text-center\"><h1 className=\"text-6xl md:text-7xl lg:text-8xl font-semibold text-white tracking-tighter\">Beams<br />Background</h1><p className=\"text-lg md:text-2xl lg:text-3xl text-white/70 tracking-tighter\">For your pleasure</p></div></div></div>}>\r\n            <div\r\n                className={cn(\r\n                    \"relative min-h-screen w-full overflow-hidden bg-neutral-950\",\r\n                    className\r\n                )}\r\n            >\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    className=\"absolute inset-0\"\r\n                    style={{ filter: \"blur(15px)\" }}\r\n                />\r\n\r\n                <motion.div\r\n                    className=\"absolute inset-0 bg-neutral-950/5\"\r\n                    animate={{\r\n                        opacity: [0.05, 0.15, 0.05],\r\n                    }}\r\n                    transition={{\r\n                        duration: 10,\r\n                        ease: \"easeInOut\",\r\n                        repeat: Number.POSITIVE_INFINITY,\r\n                    }}\r\n                    style={{\r\n                        backdropFilter: \"blur(50px)\",\r\n                    }}\r\n                />\r\n\r\n                <div className=\"relative z-10 flex h-screen w-full items-center justify-center\">\r\n                    <div className=\"flex flex-col items-center justify-center gap-6 px-4 text-center\">\r\n                        <motion.h1\r\n                            className=\"text-6xl md:text-7xl lg:text-8xl font-semibold text-white tracking-tighter\"\r\n                            initial={{ opacity: 0, y: 20 }}\r\n                            animate={{ opacity: 1, y: 0 }}\r\n                            transition={{ duration: 0.8 }}\r\n                        >\r\n                            Beams\r\n                            <br />\r\n                            Background\r\n                        </motion.h1>\r\n                        <motion.p\r\n                            className=\"text-lg md:text-2xl lg:text-3xl text-white/70 tracking-tighter\"\r\n                            initial={{ opacity: 0, y: 20 }}\r\n                            animate={{ opacity: 1, y: 0 }}\r\n                            transition={{ duration: 0.8 }}\r\n                        >\r\n                            For your pleasure\r\n                        </motion.p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ClientOnly>\r\n    );\r\n}",
      "path": "/components/workable/beams-background.tsx",
      "target": "/components/workable/beams-background.tsx"
    }
  ]
}