{
  "name": "ai-input-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Globe, Paperclip, Send } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\nexport default function AIInput_04() {\r\n    const [value, setValue] = useState(\"\");\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 52,\r\n        maxHeight: 200,\r\n    });\r\n    const [showSearch, setShowSearch] = useState(true);\r\n\r\n    const handleSubmit = () => {\r\n        setValue(\"\");\r\n        adjustHeight(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"relative max-w-xl w-full mx-auto\">\r\n                <div className=\"relative flex flex-col\">\r\n                    <div className=\"overflow-y-auto max-h-[200px]\">\r\n                        <Textarea\r\n                            id=\"ai-input-04\"\r\n                            value={value}\r\n                            placeholder=\"Search the web...\"\r\n                            className=\"w-full rounded-xl rounded-b-none px-4 py-3 bg-black/5 dark:bg-white/5 border-none dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70 resize-none focus-visible:ring-0 leading-[1.2]\"\r\n                            ref={textareaRef}\r\n                            onKeyDown={(e) => {\r\n                                if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                    e.preventDefault();\r\n                                    handleSubmit();\r\n                                }\r\n                            }}\r\n                            onChange={(e) => {\r\n                                setValue(e.target.value);\r\n                                adjustHeight();\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"h-12 bg-black/5 dark:bg-white/5 rounded-b-xl\">\r\n                        <div className=\"absolute left-3 bottom-3 flex items-center gap-2\">\r\n                            <label className=\"cursor-pointer rounded-lg p-2 bg-black/5 dark:bg-white/5\">\r\n                                <input type=\"file\" className=\"hidden\" />\r\n                                <Paperclip className=\"w-4 h-4 text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white transition-colors\" />\r\n                            </label>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                    setShowSearch(!showSearch);\r\n                                }}\r\n                                className={cn(\r\n                                    \"rounded-full transition-all flex items-center gap-2 px-1.5 py-1 border h-8 cursor-pointer\",\r\n                                    showSearch\r\n                                        ? \"bg-sky-500/15 border-sky-400 text-sky-500\"\r\n                                        : \"bg-black/5 dark:bg-white/5 border-transparent text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white \"\r\n                                )}\r\n                            >\r\n                                <div className=\"w-4 h-4 flex items-center justify-center shrink-0\">\r\n                                    <motion.div\r\n                                        animate={{\r\n                                            rotate: showSearch ? 180 : 0,\r\n                                            scale: showSearch ? 1.1 : 1,\r\n                                        }}\r\n                                        whileHover={{\r\n                                            rotate: showSearch ? 180 : 15,\r\n                                            scale: 1.1,\r\n                                            transition: {\r\n                                                type: \"spring\",\r\n                                                stiffness: 300,\r\n                                                damping: 10,\r\n                                            },\r\n                                        }}\r\n                                        transition={{\r\n                                            type: \"spring\",\r\n                                            stiffness: 260,\r\n                                            damping: 25,\r\n                                        }}\r\n                                    >\r\n                                        <Globe\r\n                                            className={cn(\r\n                                                \"w-4 h-4\",\r\n                                                showSearch\r\n                                                    ? \"text-sky-500\"\r\n                                                    : \"text-inherit\"\r\n                                            )}\r\n                                        />\r\n                                    </motion.div>\r\n                                </div>\r\n                                <AnimatePresence>\r\n                                    {showSearch && (\r\n                                        <motion.span\r\n                                            initial={{ width: 0, opacity: 0 }}\r\n                                            animate={{\r\n                                                width: \"auto\",\r\n                                                opacity: 1,\r\n                                            }}\r\n                                            exit={{ width: 0, opacity: 0 }}\r\n                                            transition={{ duration: 0.2 }}\r\n                                            className=\"text-sm overflow-hidden whitespace-nowrap text-sky-500 shrink-0\"\r\n                                        >\r\n                                            Search\r\n                                        </motion.span>\r\n                                    )}\r\n                                </AnimatePresence>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"absolute right-3 bottom-3\">\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={handleSubmit}\r\n                                className={cn(\r\n                                    \"rounded-lg p-2 transition-colors\",\r\n                                    value\r\n                                        ? \"bg-sky-500/15 text-sky-500\"\r\n                                        : \"bg-black/5 dark:bg-white/5 text-black/40 dark:text-white/40 hover:text-black dark:hover:text-white cursor-pointer\"\r\n                                )}\r\n                            >\r\n                                <Send className=\"w-4 h-4\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-04.tsx",
      "target": "/components/workable/ai-input-04.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}