{
  "name": "ai-input-17",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\nimport { ArrowUpCircle, Paperclip, Globe, Figma } from \"lucide-react\";\r\n\r\nexport default function AIInput_17() {\r\n    const [value, setValue] = useState(\"\");\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 80,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            if (value.trim()) {\r\n                setValue(\"\");\r\n                adjustHeight(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 min-w-full\">\r\n            <div className=\"relative\">\r\n                <div className=\"relative flex flex-col border border-black/10 dark:border-white/10 rounded-xl\">\r\n                    <div className=\"overflow-y-auto\">\r\n                        <Textarea\r\n                            ref={textareaRef}\r\n                            value={value}\r\n                            onChange={(e) => {\r\n                                setValue(e.target.value);\r\n                                adjustHeight();\r\n                            }}\r\n                            onKeyDown={handleKeyDown}\r\n                            placeholder=\"Ask me anything...\"\r\n                            className={cn(\r\n                                \"w-full px-4 py-3\",\r\n                                \"resize-none\",\r\n                                \"bg-transparent\",\r\n                                \"border-none\",\r\n                                \"focus:outline-hidden\",\r\n                                \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                                \"placeholder:text-black/50 dark:placeholder:text-white/50\",\r\n                                \"align-top leading-normal\",\r\n                                \"min-h-[80px]\"\r\n                            )}\r\n                            style={{\r\n                                overflow: \"hidden\",\r\n                                outline: \"none\",\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"h-14\">\r\n                        <div className=\"absolute left-3 right-3 bottom-3 flex items-center justify-between\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\r\n                                >\r\n                                    <Paperclip className=\"w-4 h-4\" />\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\r\n                                >\r\n                                    <Globe className=\"w-4 h-4 text-blue-500\" />\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\r\n                                >\r\n                                    <Figma className=\"w-4 h-4 text-pink-500\" />\r\n                                </button>\r\n                            </div>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={cn(\r\n                                    \"p-2 transition-colors\",\r\n                                    value.trim()\r\n                                        ? \"text-blue-500 hover:text-blue-600\"\r\n                                        : \"text-black/30 dark:text-white/30\"\r\n                                )}\r\n                            >\r\n                                <ArrowUpCircle className=\"w-6 h-6\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "ai-input-17.tsx",
      "target": "components/workable/ai-input-17.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "use-auto-resize-textarea.ts",
      "target": "hooks/use-auto-resize-textarea.ts"
    }
  ]
}