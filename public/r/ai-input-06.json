{
  "name": "ai-input-06",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { CornerRightUp } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\nexport default function AIInput_06() {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 50,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        setInputValue(\"\");\r\n        adjustHeight(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full py-4\">\r\n            <div className=\"relative max-w-xl w-full mx-auto flex items-start flex-col gap-2\">\r\n                <div className=\"relative max-w-xl w-full mx-auto\">\r\n                    <Textarea\r\n                        ref={textareaRef}\r\n                        id=\"ai-input-06\"\r\n                        placeholder=\"Ask me anything!\"\r\n                        className={cn(\r\n                            \"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-3xl pl-6 pr-12 py-4 placeholder:text-black/70 dark:placeholder:text-white/70 border-none ring-black/30 dark:ring-white/30 text-black dark:text-white resize-none text-wrap leading-[1.2]\",\r\n                            \"min-h-[56px]\"\r\n                        )}\r\n                        value={inputValue}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                if (e.shiftKey) {\r\n                                    return;\r\n                                }\r\n                                e.preventDefault();\r\n                                handleSubmit();\r\n                            }\r\n                        }}\r\n                        onChange={(e) => {\r\n                            setInputValue(e.target.value);\r\n                            adjustHeight();\r\n                        }}\r\n                    />\r\n                    <button\r\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\r\n                        type=\"button\"\r\n                    >\r\n                        <CornerRightUp\r\n                            className={cn(\r\n                                \"w-4 h-4 transition-opacity dark:text-white\",\r\n                                inputValue ? \"opacity-100\" : \"opacity-30\"\r\n                            )}\r\n                        />\r\n                    </button>\r\n                </div>\r\n                <p className=\"ml-4 text-xs text-black/40 dark:text-white/40\">\r\n                    {inputValue.length + 20}/100 characters\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/workable/ai-input/ai-input-06.tsx",
      "target": "/components/workable/ai-input-06.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}