{
  "name": "input-06",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst OTP_LENGTH = 6;\r\n\r\nexport default function Input_06() {\r\n    const [code, setCode] = useState<string[]>(Array(OTP_LENGTH).fill(\"\"));\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n    const [shake, setShake] = useState(false);\r\n\r\n    useEffect(() => {\r\n        inputRefs.current = inputRefs.current.slice(0, OTP_LENGTH);\r\n    }, []);\r\n\r\n    const handleChange = (index: number, value: string) => {\r\n        if (!/^\\d*$/.test(value)) return;\r\n\r\n        const newCode = [...code];\r\n        newCode[index] = value.slice(-1);\r\n        setCode(newCode);\r\n\r\n        if (value && index < OTP_LENGTH - 1) {\r\n            inputRefs.current[index + 1]?.focus();\r\n            setActiveIndex(index + 1);\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (\r\n        index: number,\r\n        e: React.KeyboardEvent<HTMLInputElement>\r\n    ) => {\r\n        if (e.key === \"Backspace\" && !code[index] && index > 0) {\r\n            // Move to previous input on backspace if current input is empty\r\n            inputRefs.current[index - 1]?.focus();\r\n            setActiveIndex(index - 1);\r\n        } else if (e.key === \"ArrowLeft\" && index > 0) {\r\n            inputRefs.current[index - 1]?.focus();\r\n            setActiveIndex(index - 1);\r\n        } else if (e.key === \"ArrowRight\" && index < OTP_LENGTH - 1) {\r\n            inputRefs.current[index + 1]?.focus();\r\n            setActiveIndex(index + 1);\r\n        }\r\n    };\r\n\r\n    const handlePaste = (e: React.ClipboardEvent) => {\r\n        e.preventDefault();\r\n        const pastedData = e.clipboardData\r\n            .getData(\"text/plain\")\r\n            .slice(0, OTP_LENGTH);\r\n\r\n        if (!/^\\d+$/.test(pastedData)) {\r\n            setShake(true);\r\n            setTimeout(() => setShake(false), 600);\r\n            return;\r\n        }\r\n\r\n        const newCode = [...code];\r\n        pastedData.split(\"\").forEach((digit, index) => {\r\n            newCode[index] = digit;\r\n        });\r\n        setCode(newCode);\r\n\r\n        const focusIndex = Math.min(pastedData.length, OTP_LENGTH - 1);\r\n        inputRefs.current[focusIndex]?.focus();\r\n        setActiveIndex(focusIndex);\r\n    };\r\n\r\n    const setInputRef = useCallback(\r\n        (index: number) => (el: HTMLInputElement | null) => {\r\n            inputRefs.current[index] = el;\r\n        },\r\n        []\r\n    );\r\n\r\n    return (\r\n        <div className=\"w-full max-w-sm space-y-2\">\r\n            <fieldset\r\n                className={cn(\"flex flex-col gap-2\", shake && \"animate-shake\")}\r\n            >\r\n                <legend className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">\r\n                    Verification Code\r\n                </legend>\r\n\r\n                <div className=\"flex gap-2 items-center justify-start\">\r\n                    {Array.from({ length: OTP_LENGTH }).map((_, index) => (\r\n                        <div key={`otp-input-${index}`} className=\"relative\">\r\n                            <input\r\n                                id={`otp-input-${index}`}\r\n                                ref={setInputRef(index)}\r\n                                type=\"text\"\r\n                                inputMode=\"numeric\"\r\n                                maxLength={1}\r\n                                value={code[index]}\r\n                                onChange={(e) =>\r\n                                    handleChange(index, e.target.value)\r\n                                }\r\n                                onKeyDown={(e) => handleKeyDown(index, e)}\r\n                                onPaste={handlePaste}\r\n                                onFocus={() => setActiveIndex(index)}\r\n                                className={cn(\r\n                                    \"w-12 h-14 text-center text-lg font-semibold\",\r\n                                    \"rounded-lg border\",\r\n                                    \"transition-all duration-200\",\r\n                                    \"bg-white dark:bg-zinc-900\",\r\n                                    \"border-zinc-200 dark:border-zinc-800\",\r\n                                    activeIndex === index &&\r\n                                        \"border-indigo-500 dark:border-indigo-500\",\r\n                                    \"focus:outline-hidden focus:ring-2\",\r\n                                    \"focus:ring-indigo-500/20\"\r\n                                )}\r\n                            />\r\n                            {index !== 6 - 1 && (\r\n                                <div className=\"absolute top-1/2 -right-2 w-2 transform -translate-y-1/2\">\r\n                                    <div className=\"w-1 h-1 rounded-full bg-zinc-300 dark:bg-zinc-600\" />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </fieldset>\r\n        </div>\r\n    );\r\n}",
      "path": "input-06.tsx",
      "target": "components/workable/input-06.tsx"
    }
  ]
}