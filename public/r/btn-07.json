{
  "name": "btn-07",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Download, Check, X } from \"lucide-react\";\r\n\r\ninterface Btn07Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    onProcess?: () => Promise<boolean>;\r\n    processDuration?: number;\r\n}\r\n\r\nexport default function Btn07({\r\n    className,\r\n    onProcess = async () => {\r\n        await new Promise((resolve) => setTimeout(resolve, 2000));\r\n        return Math.random() > 0.5;\r\n    },\r\n    processDuration = 2000,\r\n    ...props\r\n}: Btn07Props) {\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState<boolean | null>(null);\r\n    const [isScaling, setIsScaling] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (isProcessing) {\r\n            const startTime = Date.now();\r\n            const interval = setInterval(() => {\r\n                const elapsed = Date.now() - startTime;\r\n                const newProgress = (elapsed / processDuration) * 100;\r\n\r\n                if (newProgress >= 100) {\r\n                    clearInterval(interval);\r\n                    setProgress(100);\r\n                } else {\r\n                    setProgress(newProgress);\r\n                }\r\n            }, 10);\r\n\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [isProcessing, processDuration]);\r\n\r\n    async function handleClick() {\r\n        if (isProcessing) return;\r\n\r\n        setIsProcessing(true);\r\n        setIsSuccess(null);\r\n        setProgress(0);\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, processDuration));\r\n        const success = onProcess ? await onProcess() : true;\r\n\r\n        setIsSuccess(success);\r\n        setIsProcessing(false);\r\n        setIsScaling(true);\r\n\r\n        setTimeout(() => {\r\n            setIsSuccess(null);\r\n            setProgress(0);\r\n            setIsScaling(false);\r\n        }, 2000);\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            className={cn(\r\n                \"min-w-40 relative group\",\r\n                \"bg-blue-50 dark:bg-blue-950\",\r\n                \"hover:bg-blue-100 dark:hover:bg-blue-900\",\r\n                \"text-blue-600 dark:text-blue-300\",\r\n                \"border border-blue-200 dark:border-blue-800\",\r\n                \"transition-all duration-300\",\r\n                isProcessing && \"cursor-wait\",\r\n                className\r\n            )}\r\n            onClick={handleClick}\r\n            disabled={isProcessing}\r\n            {...props}\r\n        >\r\n            <div\r\n                className={cn(\r\n                    \"w-full flex items-center justify-center gap-2\",\r\n                    isScaling && \"animate-[scale_300ms_ease-in-out]\"\r\n                )}\r\n            >\r\n                {isSuccess === null ? (\r\n                    <>\r\n                        <Download\r\n                            className={cn(\r\n                                \"w-4 h-4 transition-transform duration-200\",\r\n                                \"group-hover:scale-110\",\r\n                                isProcessing && \"animate-bounce\"\r\n                            )}\r\n                        />\r\n                        <span>\r\n                            {isProcessing ? \"Processing...\" : \"Download\"}\r\n                        </span>\r\n                    </>\r\n                ) : isSuccess ? (\r\n                    <>\r\n                        <Check className=\"w-4 h-4 text-green-500\" />\r\n                        <span className=\"text-green-500\">Complete!</span>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <X className=\"w-4 h-4 text-red-500\" />\r\n                        <span className=\"text-red-500\">Failed</span>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </Button>\r\n    );\r\n}",
      "path": "btn-07.tsx",
      "target": "/components/workable/btn-07.tsx"
    }
  ]
}